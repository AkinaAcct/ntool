#!/data/data/com.termux/files/usr/bin/env bash
####################
#                  #
#  屎  山  代  码  #
#                  #
####################
#也许你不知道，但这是一个高中生在课余时间写的一个垃圾屎山脚本
#代码虽然是自己敲的
#但是真的好jb的乱
#以这也(一)许(定)后会成为一个烂尾工程吧

arch="`uname -m`"
mainpath="/data/data/com.termux/files/home/.ntool"  #用隐藏目录,防止误删

#以下是标准屎山之我自己都不认识的function（）
backup_page(){
    echo "0. 返回脚本主页"
    echo "1. 备份termux"
    echo "2. 恢复备份"
    echo "3. 删除备份"
    echo "你在使用一个**实验性**功能"
	echo "备份文件将保存在/sdcard/Download/backup"
	read -p "输入你的选择:" backup_page_choice
    case $backup_page_choice in
        0)
            ntool
            ;;
        1)
            read -p "输入备份名:" name
        	cd ~
        	if command -v tar > /dev/null;then
                if [ -d storage ];then
                    echo "可能较慢，请耐心等待"
			    	echo "否则因耐心不足而导致备份失败或恢复备份失败与我无关"
				    read -p "按回车以继续"
                    cd /data/data/com.termux/
	    			tar -cvpzf ~/storage/downloads/backup/${name}.tgz files
		    		echo "计算sha1..."
			    	sha1sum ~/storage/downloads/backup/${name}.tgz > ~/storage/downloads/backup/${name}-termux-sha.txt
				    echo "名称:${name} 时间:`date`" >> ${mainpath}/backups.txt
    				echo "完成备份"
                else
		    		echo "termux-setup-storage未执行"
			    	echo "执行中..."
				    sleep 2
    				termux-setup-storage
	    			echo "done"
		    		sleep 1
			    	backup_page
                fi
            else
                echo "tar未安装"
			    echo "start installing..."
    			pkg install tar -y
	    		backup_page
            fi
            ;;
        2)
			echo "你的备份有:"
			cat ${mainpath}/backups.txt
			read -p "输入你要恢复的备份:" name
			echo "比对sha256中..."
			sha1sum -c ~/storage/downloads/backup/${name}-termux-sha.txt >> /dev/null 2>&1
			if [ $? = 0 ];then
				echo "开始恢复"
				tar -xvpzf ~/storage/downloads/backup/${name}.tgz -C /data/data/com.termux/
				read -p "完成，重启生效，按回车以退出"
			else
				echo "错误的sha256值！不进行恢复！这代表着压缩包可能已经损坏"
				read -p "按回车以继续"
				backup_page
			fi
            ;;
        3)
            echo "devloping..."
            ;;
        *)
            echo "未知选项"
            sleep 2 
            backup_page
            ;;
    esac
}

choose_os_page(){	#这里是选择容器版本的页面function
	clear
	echo "this is a bad page that i even want to delete it"
        echo "all of the choices will be never updated(maybe?) and DO NOT REPORT ISSUSES ANOUT THIS SCIRPT ABOUT PROOT!"
        echo "该页面不在更新，**不要**提关于容器功能的issue，因为我也不会去修"
        echo "只有Ubuntu的原因是我写脚本时只需要一个差不多的proot容器:D"
        echo "0. 返回上一个页面"
        echo "1. Ubuntu"
        echo "2. debian(已烂尾)"
        read -p "输入你的选择:" cos
        case $cos in
                0)
        		ntool
                        ;;
                1)
                        cd $mainpath
                        if [ -a ub-i.sh ];	#检测有无两个安装脚本
                        then
                                chmod +x ub-i.sh
                                ./ub-i.sh
                        else
                                wget https://raw.githubusercontent.com/nnyyaa/ntool/main/sc/ub-i.sh
                                chmod +x ub-i.sh
                                ./ub-i.sh
                        fi
                        ;;
                2)
                        cd $mainpath
                        if [ -a de-i.sh ];	#同上
                        then
                                chmod +x de-i.sh
                                ./de-i.sh
                        else
                                wget https://raw.githubusercontent.com/nnyyaa/ntool/main/sc/de-i.sh
                                chmod +x de-i.sh
                                ./de-i.sh
                        fi
			;;
                *)
                        echo "未知选项"
			sleep 2
			choose_os_page
                        ;;
        esac
}

other_function_page(){			#这里是其他功能页的function
	clear
	echo "此页面进行分类"
	echo "0. 返回脚本首页"
        echo "1. 网络类"
	echo "2. 工具类"
        read -p "输入你的选择" ofc    #of是other function的缩写
        case $ofc in
                0)
			ntool
                        ;;
                1)
                        web_page
                        ;;
		2)
			tool_page
			;;
                *)
                        echo "未知选择"
			sleep 2
			other_function_page
                        ;;
        esac
}

ssh_check_install(){
	clear
	if command -v ssh;then
		echo "ssh功能正在测试"
		echo "可能会有意想不到的错误"
		read -p "按回车以继续"
		ssh_page
	else
		echo "未安装ssh客户/服务端"
		echo "installing..."
		pkg install openssh
		ssh_check_install
	fi
}

ssh_page(){
	clear
	echo "0. 返回上一页"
	echo "1. 打开sshd服务（他人连接）"
	echo "2. 连接远程服务器"
	read -p "输入你的选择:" ssh_choice
	case $ssh_choice in
		0)
			tool_page
			;;
		1)
			sshd
			read -p "启动完成 按任意键退出脚本"
			exit 0
			;;
		2)
			if command -v sshpass;then
				read -p "输入远程服务器ip/域名:" ssh_ip
				read -p "输入要登陆的用户名:" ssh_user
				read -p "输入ssh端口:" ssh_port
				read -p "输入密码:" ssh_passwd
				echo "please wait..."
				sshpass -p ${ssh_passwd} ssh ${ssh_user}@${ssh_ip} -p ${ssh_port}
			else
				echo "sshpass未安装"
				echo "installing..."
				pkg install sshpass -y
				ssh_page
			fi
			;;
		*)
			echo "未知选择"
			sleep 2
			ssh_page
			;;
	esac
}

tool_page(){			#这里是其它工具-工具类页面的function
	clear
	echo "0. 返回上一页"
	echo "1. ping"
	echo "2. ping6(即ipv6 ping)"
	echo "3. 寻找文件(find)"
	echo "4. 在termux原系统里安装jdk"
	echo "5. 备份termux(实验性功能)"
	echo "6. 恢复备份"
	echo "7. ssh功能"
	echo "8. ?"
	echo "00. 打开该项目github地址（夹 带 私 货）"
	read -p "输入你的选择:" answer
	case $answer in
		0)
			other_function_page
			;;
		00)
			echo "启 动 私 货"
			echo "记得给我点个star哦"
			am start -a android.intent.action.VIEW -d https://github.com/nnyyaa/ntool > /dev/null 2>&1
			;;

		1)
			if command -v ping > /dev/null;then
				read -p "输入要进行ping的IP/域名:" ip
				read -p "输入要ping的次数:" times
				read -p "输入ping的速度（以秒为单位，省略符号，无root最快0.2）:" speed
				echo "start ping..."
				ping -i ${speed} -c${times} ${ip}
				echo "stop ping."
			else
				echo "未安装ping，正在安装..."
				pkg install termux-tools -y
				tool_page
			fi
			;;
		2)
			if command -v ping6 > /dev/null;then
                                read -p "输入要进行ping6的IP/域名:" ip
                                read -p "输入要ping6的次数:" times
                                read -p "输入ping6的速度（以秒为单位，省略符号，无root最快0.2）:" speed
                                echo "start ping..."
                                ping6 -i ${speed} -c${times} ${ip}
                                echo "stop ping."
			else
				echo "ping6未安装,正在安装..."
				pkg install termux-tools -y
				tool_page
			fi
			;;
		3)
			read -p "输入你要搜索的文件:" filename
			read -p "输入你要搜索的目录:" filepath
			echo "searching..."
			find -name ${filename} ${filepath}
			;;
		4)
			echo "只支持openjdk17"
			read -p "按回车以继续"	#我好水啊（）
			pkg install openjdk-17 -y
			echo "安装完成"
			;;
		5)
						;;
		7)
			ssh_check_install
			;;
		8)
			echo "你为什么要选择一个'?'选项啊喂！"
			sleep 2
			echo "真是个笨蛋！！"
			sleep 2
			tool_page
			;;
		*)
			echo "未知选择"
			sleep 2
			tool_page
			;;
	esac
}

update(){			#这里是升级的function
	cd ~
	rm install.sh > /dev/null 2>&1
	wget https://raw.githubusercontent.com/nnyyaa/ntool/main/install.sh
	chmod +x ~/install.sh
	~/install.sh
	rm install.sh > /dev/null 2>&1
}

web_page(){				#这里是其他功能-网络类页面function
	clear
	#echo "这里是最水的页面（doge）"
	echo "0. 返回上个页面"
	echo "1. 安装Nginx"
	echo "2. 安装Apache2"
	echo "3. 安装php"
	echo "4. 安装MySQL(mariadb)"
	read -p "输入你的选择:" webc
	case $webc in
		0)
			other_function_page
			;;
		1)
			pkg install nginx -y
			echo "done"
			;;
		2)
			pkg install apache2 -y
			echo "done"
			;;
		3)
			pkg install php -y
			echo "done"
			;;
		4)
			pkg install mariadb -y
			echo "done"
			;;
		*)
			echo "未知选择"
			sleep 2
			web_page
			;;
	esac
}

clear
cd ${mainpath}
wget https://raw.githubusercontent.com/nnyyaa/ntool/main/version -O latest_version > /dev/null 2>&1
echo "ntool-一个shitcode项目"
if [ "`cat ${mainpath}/local_version`" != "`cat ${mainpath}/latest_version`" ];
then
	cowsay "所以你真的不更新吗qwq"
fi
echo "最新版本:`cat ${mainpath}/latest_version`"	#version来自"git describe --tags"(我懒省事)
echo "本地版本:`cat ${mainpath}/local_version`"		#local_version由install.sh设置
echo "你的架构为:${arch}"
echo "当前时间:`date '+%Y-%m-%d %H:%M:%S %A'`"
echo "0. 退出"
echo "00. 更新"
echo "1. 容器功能(已烂尾)"
echo "2. 其他功能"
echo "3. 备份功能"
read -p "输入你的选择:" choice
case $choice in
00)
	update
	;;
0)
	echo "bye"
	;;
1)
	choose_os_page
	;;
2)
	other_function_page
	;;
3)
    backup_page
    ;;
egg)
    echo "是个彩蛋？"
    sleep 2
    echo "Merry Christmas!"
    ;;
*)
	echo "输入一个没有的选项是在为难我嘛！"
	sleep 2
	ntool
	;;
esac
exit 0
