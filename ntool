#!/data/data/com.termux/files/usr/bin/bash
####################
#                  #
#  屎  山  代  码  #
#                  #
####################
#也许你不知道，但这是一个高中生在课余时间写的一个垃圾屎山脚本
#代码虽然是自己敲的
#但是真的好jb的乱
#以这也(一)许(定)后会成为一个烂尾工程吧
RED="\E[1;31m"      # 红
GREEN="\E[1;32m"     # 绿
YELOW="\E[1;33m"    # 黄
BLUE="\E[1;34m"     # 蓝
PINK="\E[1;35m"     # 粉
RESET="\E[0m"          # 去色
ARCH="`uname -m`"       #架构
MAINPATH="/data/data/com.termux/files/home/.ntool"      #主目录
RAWURL="https://raw.githubusercontent.com/nnyyaa/ntool/main/"       #GitHub raw地址

#以下是标准屎山之我自己都不认识的function（）
backup_page(){      #备份页面function
    clear
    echo "0. 返回脚本主页"
    echo "1. 备份termux"
    echo "2. 恢复备份"
    echo "3. 删除备份"
    echo -e "你在使用一个${RED}实验性${RESET}功能"
	echo -e "备份文件将保存在${BLUE}/sdcard/Download/backup${RESET}"
	read -p "输入你的选择:" backup_page_choice
    case $backup_page_choice in
        0)
            ntool
            ;;
        1)
            read -p "输入备份名:" name
        	cd ~
        	if command -v tar > /dev/null;then
                if [ -d storage ];then
                    echo -e "可能${RED}较慢${RESET}，请耐心等待"
			    	echo "否则因耐心不足而导致备份失败或恢复备份失败与我无关"
				    read -p "按回车以继续"
                    cd /data/data/com.termux/
	    			tar -cvpzf ~/storage/downloads/backup/${name}.tgz files
		    		echo "计算sha1..."
			    	sha1sum ~/storage/downloads/backup/${name}.tgz > ~/storage/downloads/backup/${name}-termux-sha.txt
				    echo "名称:${name} 时间:`date`" >> ${MAINPATH}/backups.txt
    				echo -e "${GREEN}完成备份${RESET}"
                else
		    		echo "termux-setup-storage未执行"
			    	echo "执行中..."
				    sleep 2
    				termux-setup-storage
	    			echo "done"
		    		sleep 1
			    	backup_page
                fi
            else
                echo "tar未安装"
			    echo "start installing..."
    			pkg install tar -y
	    		backup_page
            fi
            ;;
        2)
			echo "你的备份有:"
			cat ${MAINPATH}/backups.txt
			read -p "输入你要恢复的备份:" name
			echo "比对sha256中..."
			sha1sum -c ~/storage/downloads/backup/${name}-termux-sha.txt >> /dev/null 2>&1
			if [ $? = 0 ];then
				echo "开始恢复"
				tar -xvpzf ~/storage/downloads/backup/${name}.tgz -C /data/data/com.termux/
				echo -e  "${GREEN}完成，重启生效，按回车以退出${RESET}"
			else
				echo -e "${RED}错误的sha256值！不进行恢复！这代表着压缩包可能已经损坏${RESET}"
				read -p "按回车以继续"
				backup_page
			fi
            ;;
        3)
            echo "devloping..."
            ;;
        *)
            echo "${RED}未知选项${RESET}"
            sleep 2 
            backup_page
            ;;
    esac
}

choose_os_page(){	#这里是选择容器版本的页面function
	clear
	echo "this is a bad page that i even want to delete it"
    echo "all of the choices will be never updated(maybe?) and DO NOT REPORT ISSUSES ANOUT THIS SCIRPT ABOUT PROOT!"
    echo -e "${RED}该页面不在更新${RESET}"
    echo "只有Ubuntu的原因是我写脚本时只需要一个差不多的proot容器:D"
    echo "0. 返回上一个页面"
    echo "1. Ubuntu"
    echo "2. debian(已烂尾)"
    read -p "输入你的选择:" cos
    case $cos in 
        0)
            ntool
            ;;
        1)
            cd ${MAINPATH}
            if [ -a ub-i.sh ];
            then 
                chmod +x ub-i.sh
                ./ub-i.sh 
            else
                wget ${RAWURL}/sc/ub-i.sh
                chmod +x ub-i.sh
                ./ub-i.sh
                fi
            ;;
        2)
            cd ${MAINPATH}
            if [ -a de-i.sh ];
            then
                chmod +x de-i.sh
                ./de-i.sh
            else
                wget ${RAWURL}/sc/de-i.sh
                chmod +x de-i.sh
                ./de-i.sh
            fi
			;;
        *)
            echo "${RED}未知选项${RESET}"
			sleep 2
		    choose_os_page
            ;;
    esac
}

desktop_page(){
    clear
    echo "0. 返回脚本首页"
    echo "1. 安装xfce(**较**为完整的图形化环境)"
    echo "2. 安装openbox(仅提供一个图形化环境)"
    echo -e "${RED}3. 卸载(这将会导致你的桌面数据丢失)${RESET}"
    echo -e "请注意！原系统桌面${RED}可玩性很低${RESET}"
    echo -e "由于${RED}不是${RESET}一个正常linux环境，${RED}大部分${RESET}linux软件都会报错"
    echo  -e "可能${RED}较慢${RESET}，${GREEN}请耐心等待${RESET}"
    read -p "输入你的选择:" desktop_choice
        case $desktop_choice in
        0)
            ntool
            ;;
        1)
            echo "安装中..."
            pkg install openbox pypanel xorg-xsetroot xfce tigervnc -y 
            pip install PyXDG
            cd ${PREFIX}/bin
            echo "获取启动脚本中..."
            wget ${RAWURL}/desktop/startxfce
            chmod +x startxfce
            echo -e "${GREEN}完成${RESET}"
            echo -e "输入${GREEN}startxfce${RESET}以启动xfce"
            cd ~
            read -p "按回车以继续"
            ;;
        2)
            pkg install openbox pypanel xorg-xsetroot tigervnc -y
            pip3 install PyXDG
            cd ${PREFIX}/bin
            echo -e "${BLUE}获取启动脚本中...${RESET}"
            wget ${RAWURL}/desktop/startopenbox
            chmod +x startopenbox
            echo -e "${GREEN}完成${RESET}"
            echo -s "输入${GREEN}startopenbox${RESET}以启动"
            read -p "按回车以继续"
            ;;
        3)
            echo "开发中"
            sleep 2
            desktop_page
            ;;
        *)
            echo "${RED}未知选项${RESET}"
            sleep 2 
            desktop_page
            ;;
    esac
}

other_tool_page(){			#这里是其他功能页的function
	clear
	echo "此页面进行分类"
	echo "0. 返回脚本首页"
    echo "1. 网络类"
	echo "2. 工具类"
    read -p "输入你的选择:" ofc    #of是other function的缩写
    case $ofc in 
        0)
		    ntool
            ;;
        1)
            web_page
            ;;
	    2)
	    	tool_page
		    ;;
        *)
            echo "${RED}未知选择${RESET}"
    		sleep 2 
            other_tool_page
            ;;
    esac
}

ssh_check_install(){
	clear
	if command -v ssh;then
		echo "ssh功能正在测试"
		echo "可能会有意想不到的错误"
		read -p "按回车以继续"
		ssh_page
	else
		echo "${RED}未安装ssh客户/服务端${RESET}"
		echo "${RED}安装中...${RESET}"
		pkg install openssh -y 
        read -p "按回车以继续"
		ssh_check_install
	fi
}

ssh_page(){
	clear
	echo "0. 返回上一页"
	echo "1. 打开sshd服务（他人连接）"
	echo "2. 连接远程服务器"
	read -p "输入你的选择:" ssh_choice
	case $ssh_choice in
		0)
			tool_page
			;;
		1)
			sshd
			read -p "启动完成 按任意键退出脚本"
			exit 0
			;;
		2)
			if command -v sshpass;then
				read -p "输入远程服务器ip/域名:" ssh_ip
				read -p "输入要登陆的用户名:" ssh_user
				read -p "输入ssh端口:" ssh_port
				read -p "输入密码:" ssh_passwd
				echo "please wait..."
				sshpass -p ${ssh_passwd} ssh ${ssh_user}@${ssh_ip} -p ${ssh_port}
			else
				echo "sshpass未安装"
				echo "installing..."
				pkg install sshpass -y
				ssh_page
			fi
			;;
		*)
			echo "${RED}未知选择${RESET}"
			sleep 2
			ssh_page
			;;
	esac
}

tool_page(){			#这里是其它工具-工具类页面的function
	clear
	echo "0. 返回上一页"
	echo "1. ping"
	echo "2. ping6(即ipv6 ping)"
	echo "3. 寻找文件(find)"
	echo "4. 在termux原系统里安装jdk"
	echo "5. ssh功能"
	echo "6. ?"
	echo "00. 打开该项目github地址（夹 带 私 货）"
	read -p "输入你的选择:" answer
	case $answer in
		0)
			other_tool_page
			;;
		00)
			echo "启 动 私 货"
			echo "记得给我点个star哦"
			am start -a android.intent.action.VIEW -d https://github.com/nnyyaa/ntool > /dev/null 2>&1
			;;

		1)
			if command -v ping > /dev/null;then
				read -p "输入要进行ping的IP/域名:" ip
				read -p "输入要ping的次数:" times
				read -p "输入ping的速度（以秒为单位，省略符号，无root最快0.2）:" speed
				echo "start ping..."
				ping -i ${speed} -c${times} ${ip}
				echo "stop ping."
			else
				echo "未安装ping，正在安装..."
				pkg install termux-tools -y
				tool_page
			fi
			;;
		2)
			if command -v ping6 > /dev/null;then
                read -p "输入要进行ping6的IP/域名:" ip
                read -p "输入要ping6的次数:" times
                read -p "输入ping6的速度（以秒为单位，省略符号，无root最快0.2）:" speed
                echo "start ping..."
                ping6 -i ${speed} -c${times} ${ip}
                echo "stop ping."
			else
				echo "ping6未安装,正在安装..."
				pkg install termux-tools -y
				tool_page
			fi
			;;
		3)
			read -p "输入你要搜索的文件:" filename
			read -p "输入你要搜索的目录:" filepath
			echo "searching..."
			find -name ${filename} ${filepath}
			;;
		4)
			echo "只支持openjdk17"
			read -p "按回车以继续"	#我好水啊（）
			pkg install openjdk-17 -y
			echo "安装完成"
			;;
		5)
			ssh_check_install
			;;
		6)
			echo "你为什么要选择一个'?'选项啊喂！"
			sleep 2
			echo "真是个笨蛋！！"
			sleep 2
			tool_page
			;;
		*)
			echo "${RED}未知选择${RESET}"
			sleep 2
			tool_page
			;;
	esac
}

update(){			#这里是升级的function
	cd ~
	rm install.sh > /dev/null 2>&1
	wget https://raw.githubusercontent.com/nnyyaa/ntool/main/install.sh
	chmod +x install.sh
	./install.sh
	rm install.sh > /dev/null 2>&1
}

web_page(){				#这里是其他功能-网络类页面function
	clear
	#echo "这里是最水的页面（doge）"
	echo "0. 返回上个页面"
	echo "1. 安装Nginx"
	echo "2. 安装Apache2"
	echo "3. 安装php"
	echo "4. 安装MySQL(mariadb)"
	read -p "输入你的选择:" webc
	case $webc in
		0)
			other_tool_page
			;;
		1)
			pkg install nginx -y
			echo "done"
			;;
		2)
			pkg install apache2 -y
			echo "done"
			;;
		3)
			pkg install php -y
			echo "done"
			;;
		4)
			pkg install mariadb -y
			echo "done"
			;;
		*)
			echo "${RED}未知选择${RESET}"
			sleep 2
			web_page
			;;
	esac
}

clear
cd ${MAINPATH}
wget https://raw.githubusercontent.com/nnyyaa/ntool/main/version -O latest_version > /dev/null 2>&1 
echo -e "${BLUE}`curl https://v1.hitokoto.cn/?encode=text 2>/dev/null`${RESET}"     #一言接口：hitokoto.cn
echo "ntool-一个shitcode项目"
echo -e "${GREEN}`cat ${MAINPATH}/Androidicon`${RESET}"
echo "最新版本:`cat ${MAINPATH}/latest_version`"	#version来自"git describe --tags"(我懒省事)
echo "本地版本:`cat ${MAINPATH}/local_version`"		#local_version由install.sh设置
echo "你的架构为:${ARCH}"
echo -e "当前时间:`date '+%Y-%m-%d %H:%M:%S %A'`"
echo "0. 退出"
echo "99. 更新"
echo "1. 容器功能(已烂尾)"
echo "2. 其他功能"
echo "3. 备份功能"
echo "4. "
echo "5. 一言"
echo "6. termux原系统桌面（非容器）"
read -p "输入你的选择:" choice
case  $choice  in 
    99)
	    update
    	;;
    0)
	    echo -e "${BLUE}bye${RESET}"
    	;;
    1)
	    choose_os_page
    	;;
    2)
        other_tool_page
    	;;
    3)
        backup_page
        ;;
    4)
        echo "这里什么都没有"
        echo "真的"         #你看我没骗你吧,真的什么都没有
        sleep 2 
        ntool
        ;;
    5)
        echo -e "${BLUE}`curl https://v1.hitokoto.cn/?encode=text 2>/dev/null`${RESET}"
        read -p "按回车以继续"
        ntool
        ;;
    6)
        echo "仅支持xfce,openbox"
        read -p "按回车以继续"
        desktop_page
        ;;
    *)
    	echo "${PINK}输入一个没有的选项是在为难我嘛！！${RESET}"
	    sleep 2
    	ntool
	    ;;
esac
exit 0
