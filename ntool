#!/data/data/com.termux/files/usr/bin/bash
####################
#                  #
#  屎  山  代  码  #
#                  #
####################
#也许你不知道，但这是一个高中生在课余时间写的一个垃圾屎山脚本
#代码虽然是自己敲的
#但是真的好jb的乱
#以这也(一)许(定)后会成为一个烂尾工程吧
#
#以下颜色代码为预设
RED="\E[1;31m"      # 红
GREEN="\E[1;32m"     # 绿
YELOW="\E[1;33m"    # 黄
BLUE="\E[1;34m"     # 蓝
PINK="\E[1;35m"     # 粉
RESET="\E[0m"          # 去色
ARCH="`uname -m`"       #架构
OS="`uname -o`"     #系统
MAINPATH="/data/data/com.termux/files/home/.ntool"      #主目录
RAWURL="https://raw.githubusercontent.com/nnyyaa/ntool/main/"       #GitHub raw地址(我是一只懒懒的猫猫)


cd ~
#以下是标准屎山之我自己都不认识的function（）
function wait_for_dev_page(){
    whiptail --title "ntool-tui:developing page" --msgbox "正在开发" 10 20
}

function backup_page(){      #备份页面function
    clear
    backup_page_choice=$(whiptail --title "ntool-tui:backup_page" --menu "选择一个以继续" 15 60 7 \
    "0" "返回脚本主页" \
    "1" "备份termux" \
    "2" "恢复备份" \
    "3" "删除备份" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 1 ];then
        main_page
    fi
    case $backup_page_choice in
        0)
            main_page
            ;;
        1)
            BACKUP_NAME=$(whiptail --title "ntool-tui:备份-设置名称" --inputbox "输入备份名(仅备份$PREFIX以提高速度)" 10 20 3>&1 1>&2 2>&3)
            exitstatus=$?
            if [ $exitstatus = 1 ];then
                backup_page
            elif  [ -z $BACKUP_NAME ];then
                whiptail --title "ntool-tui:WARNING" --msgbox "严重错误:不允许的空选项" 10 20
                backup_page
            fi
        	cd ~
        	if command -v tar > /dev/null;then
                if [ -d storage ];then
                    whiptail --title "ntool-tui:提示" --msgbox "备份可能会很慢,请耐心等待" 10 20
                    cd /data/data/com.termux/
                    tar -cvpzf ~/storage/downloads/backup/${BACKUP_NAME}.tgz files
                    echo -e "${GREEN}计算sha1...${RESET}"
                    sha1sum ~/storage/downloads/backup/${BACKUP_NAME}.tgz > ~/storage/downloads/backup/${name}-termux-sha.txt
                    echo "名称:${BACKUP_NAME}" >> ${MAINPATH}/backups.txt
    				echo -e "${GREEN}完成备份${RESET}"
                else
                    echo "termux-setup-storage未执行"
                    echo "执行中..."
                    sleep 2
    				termux-setup-storage
                    echo "done"
                    sleep 1 
                    backup_page
                fi
            else
                echo "tar未安装"
                echo "start installing..."
    			pkg install tar -y 
                backup_page
            fi
            ;;
        2)
            RESTORE_NAME=$(whiptail --title "备份恢复" --inputbox "选择一个备份: " 10 20 3>&1 1>&2 2>&3)
            exitstatus=$?
            if [ $exitstatus = 1 ];then
                backup_page
            elif [ -z $RESTORE_NAME ];then
                whiptail --title "ntool-tui:WARNING" --msgbox "严重错误:不允许的空选项" 15 30
                backup_page
            fi 
            cd ~
            echo "比对sha256中..."
            sha1sum -c ~/storage/downloads/backup/${RESTORE_NAME}-termux-sha.txt >> /dev/null 2>&1
            exitstatus=$?
            if [ $exitstatus = 0 ];then 
                echo "开始恢复"
                tar -xvpzf ~/storage/downloads/backup/${RESTORE_NAME}.tgz -C /data/data/com.termux/
                echo -e  "${GREEN}完成，重启生效，按回车以退出${RESET}"
            else
                whiptail --title "ntool-tui:WARNING" --msgbox "警告:不匹配的sha值!不进行恢复" 10 20
                backup_page 
            fi
            ;;
        3)
            wait_for_dev_page
            backup_page
            ;;
    esac
}

function container_page(){	#这里是选择容器版本的页面function
	clear
    cos=$(whiptail --title "ntool-tui:container page" --menu "选择一个以继续" 15 60 7 \
    "1" "Ubuntu" \
    "2" "Debian" \
    "0" "返回脚本首页" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 1 ];then
        main_page
    fi
    case $cos in 
        0)
            main_page
            ;;
        1)
            cd ${MAINPATH}
            if [ -a ub-i.sh ];
            then 
                chmod +x ub-i.sh
                ./ub-i.sh 
            else
                wget ${RAWURL}/sc/ub-i.sh
                chmod +x ub-i.sh
                ./ub-i.sh
                fi
            ;;
        2)
            cd ${MAINPATH}
            if [ -a de-i.sh ];
            then
                chmod +x de-i.sh
                ./de-i.sh
            else
                wget ${RAWURL}/sc/de-i.sh
                chmod +x de-i.sh
                ./de-i.sh
            fi
			;;
    esac
}

function desktop_page(){
    clear
    desktop_choice=$(whiptail --title "ntool-tui:desktop choose" --menu "选择一个以继续" 15 60 7 \
    "1" "仅安装openbox(基本图形环境)" \
    "2" "安装xfce(较为完整的桌面)" \
    "0" "返回脚本主页面" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 1 ];then
        main_page
    fi
    case $desktop_choice in
    0)
        main_page
        ;;
    1)
        echo "安装中..."
        pkg install openbox pypanel xorg-xsetroot xfce tigervnc -y 
        pip install PyXDG
        cd /data/data/com.termux/files/usr/bin
        echo -e "${BLUE}获取启动脚本中...${RESET}"
        wget ${RAWURL}/desktop/startxfce -O startxfce > /dev/null 2>&1
        chmod +x startxfce
        echo -e "${GREEN}完成${RESET}"
        echo -e "输入${GREEN}startxfce${RESET}以启动xfce"
        cd ~
        read -p "按回车以继续"
        ;;
    2)
        pkg install openbox pypanel xorg-xsetroot tigervnc -y
        pip install PyXDG
        cd /data/data/com.termux/files/usr/bin
        echo -e "${BLUE}获取启动脚本中...${RESET}"
        wget ${RAWURL}/desktop/startopenbox -O startopenbox > /dev/null 2>&1
        chmod +x startopenbox
        echo -e "${GREEN}完成${RESET}"
        echo -e "输入${GREEN}startopenbox${RESET}以启动"
        cd ~
        read -p "按回车以继续"
        ;;
    3)
        wait_for_dev_page
        desktop_page
        ;;
    *)
        echo -e "${RED}未知选项${RESET}"
        main_page
        ;;
    esac
}

function other_tool_page(){			#这里是其他功能页的function
    otpc=$(whiptail --title "ntool-tui:other_tool_page" --menu "选择一个以继续" 15 60 7 \
    "1" "网络页面" \
    "2" "工具页面" \
    "0" "返回上一页" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 1 ];then
        main_page
    fi
    case $otpc in 
        0)
		    main_page
            ;;
        1)
            web_page
            ;;
	    2)
	    	tool_page
		    ;;
    esac
}

function ssh_check_install(){
	clear
	if command -v ssh;then
		whiptail --title "ssh check install" --msgbox "ssh功能较少，慎用" 10 20
		ssh_page
	else
		echo "${RED}未安装ssh客户/服务端${RESET}"
		echo "${RED}安装中...${RESET}"
		pkg install openssh -y 
        echo -e "${GREEN}"
        read -p "按回车以继续"
        echo -e "${RESET}"
		ssh_check_install
	fi
}

function ssh_page(){
	clear
	echo "0. 返回上一页"
	echo "1. 打开sshd服务（他人连接）"
	echo "2. 连接远程服务器"
	read -p "输入你的选择:" ssh_choice
	case $ssh_choice in
		0)
			tool_page
			;;
		1)
			sshd
			read -p "启动完成 按任意键退出脚本"
			exit 0
			;;
		2)
			if command -v sshpass;then
				read -p "输入远程服务器ip/域名:" ssh_ip
				read -p "输入要登陆的用户名:" ssh_user
				read -p "输入ssh端口:" ssh_port
				read -p "输入密码:" ssh_passwd
				echo "please wait..."
				sshpass -p ${ssh_passwd} ssh ${ssh_user}@${ssh_ip} -p ${ssh_port}
			else
				echo "sshpass未安装"
				echo "installing..."
				pkg install sshpass -y
				ssh_page
			fi
			;;
		*)
			echo "${RED}未知选择${RESET}"
			sleep 2
			ssh_page
			;;
	esac
}

function tool_page(){			#这里是其它工具-工具类页面的function
	clear
	#echo "0. 返回上一页"
	#echo "1. ping"
	#echo "2. ping6(即ipv6 ping)"
	#echo "3. 寻找文件(find)"
	#echo "4. 在termux原系统里安装jdk"
	#echo "5. ssh功能"
	#echo "6. ?"
	#echo "00. 打开该项目github地址（夹 带 私 货）"
	#read -p "输入你的选择:" answer
    answer=$(whiptail --title "ntool-tui:tool_page" --menu "选择一个以继续" 15 60 7 \
    "1" "ping" \
    "2" "ping6" \
    "3" "文件查找" \
    "4" "安装openjdk17" \
    "5" "ssh功能" \
    "6" "?" \
    "00" "打开该项目地址(?)" \
    "0" "返回上一页" 3>&1 1>&2 2>&3) 
	case $answer in
		0)
			other_tool_page
			;;
		00)
			echo "启 动 私 货"
			echo "记得给我点个star哦"
			am start -a android.intent.action.VIEW -d https://github.com/nnyyaa/ntool > /dev/null 2>&1
			;;

		1)
			if command -v ping > /dev/null;then
				read -p "输入要进行ping的IP/域名:" ip
				read -p "输入要ping的次数:" times
				read -p "输入ping的速度（以秒为单位，省略符号，无root最快0.2）:" speed
				echo "start ping..."
				ping -i ${speed} -c${times} ${ip}
				echo "stop ping."
			else
				echo "未安装ping，正在安装..."
				pkg install termux-tools -y
				tool_page
			fi
			;;
		2)
			if command -v ping6 > /dev/null;then
                read -p "输入要进行ping6的IP/域名:" ip
                read -p "输入要ping6的次数:" times
                read -p "输入ping6的速度（以秒为单位，省略符号，无root最快0.2）:" speed
                echo "start ping..."
                ping6 -i ${speed} -c${times} ${ip}
                echo "stop ping."
			else
				echo "ping6未安装,正在安装..."
				pkg install termux-tools -y
				tool_page
			fi
			;;
		3)
			read -p "输入你要搜索的文件:" filename
			read -p "输入你要搜索的目录:" filepath
			echo "searching..."
			find -name ${filename} ${filepath}
			;;
		4)
			echo "只支持openjdk17"
			read -p "按回车以继续"	#我好水啊（）
			pkg install openjdk-17 -y
			echo "安装完成"
			;;
		5)
			ssh_check_install
			;;
		6)
			echo "你为什么要选择一个'?'选项啊喂！"
			sleep 2
			echo "真是个笨蛋！！"
			sleep 2
			tool_page
			;;
		*)
			echo "${RED}未知选择${RESET}"
			sleep 2
			tool_page
			;;
	esac
}

function check_update(){			#这里是检查/升级的function
    cd ${MAINPATH}
    wget ${RAWURL}/version -O latest_version > /dev/null 2>&1
    if [ "`cat latest_version`" != "`cat local_version`" ];then 
        if (whiptail --title "ntool-tui:update" --yesno "你的版本不是最新版。是否更新？" 10 20);then 
            bash -c "$(curl https://raw.githubusercontent.com/nnyyaa/ntool/main/install.sh)"
        else
            main_page
        fi
    else
        echo "您的版本为最新版，无需更新"
    fi 
}

function web_page(){				#这里是其他功能-网络类页面function
	clear
	#echo "这里是最水的页面（doge）"
    webc=$(whiptail --title "ntool-tui:web_page" --menu "选择一个以继续" 15 60 7 \
    "1" "安装Nginx" \
    "2" "安装Apache2" \
    "3" "安装php环境" \
    "4" "安装MySQL(mariadb)" \
    "0" "返回上一页" 3>&1 1>&2 2>&3)
    exitstatus=$?
	if [ $exitstatus = 1 ];then
        other_tool_page
    fi
	case $webc in
		0)
			other_tool_page
			;;
		1)
			pkg install nginx -y
			echo "done"
			;;
		2)
			pkg install apache2 -y
			echo "done"
			;;
		3)
			pkg install php -y
			echo "done"
			;;
		4)
			pkg install mariadb -y
			echo "done"
			;;
	esac
}

function main_page(){
    clear
    cd ${MAINPATH}
    mainchoice=$(whiptail --title "ntool-tui:main_page" --menu "选择一个以继续" 15 60 7 \
    "1" "已烂尾的容器功能" \
    "2" "其它功能" \
    "3" "备份功能" \
    "4" "“这里什么都没有”" \
    "5" "一言" \
    "6" "原系统桌面" \
    "00" "更新" \
    "0" "退出" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 1 ];then
        echo -e "${BLUE}bye${RESET}"
        exit 0
    fi
    case $mainchoice in 
        00)
	        check_update
        	;;
        0)
            echo -e "${BLUE}bye${RESET}"
            exit 0
            ;;
        1)
            container_page
            ;;
        2)
            other_tool_page
            ;;
        3)
            backup_page 
            ;;
        4)
            echo "这里什么都没有"
            echo "真的"         #你看我没骗你吧,真的什么都没有
            sleep 2 
            main_page
            ;;
        5)
            whiptail --title "ntool-一言" --msgbox "`curl https://v1.hitokoto.cn/?encode=text 2>/dev/null`" 15 60
            main_page
            ;;
        6)
            desktop_page
            ;;
    esac
}
main_page
exit 0
