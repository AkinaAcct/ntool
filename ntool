#!/data/data/com.termux/files/usr/bin/bash
####################
#                  #
#  屎  山  代  码  #
#                  #
####################
#https://github.com/nnyyaa/ntool
#这也(一)许(定)后会成为一个烂尾工程吧
#chroot不会写(也许)(大概)(心虚)
#嗯只要没有人催我就不写a_@
#以下颜色代码为预设
RED="\E[1;31m"
GREEN="\E[1;32m"
YELOW="\E[1;33m"
BLUE="\E[1;34m"
PINK="\E[1;35m"
RESET="\E[0m"
ARCH="`uname -m`"
if [ "$ARCH" == "aarch64" ];then
    ARCH="arm64"
fi
OS="`uname -o`"     #系统
STORAGEPATH="/storage/emulated/0/Download/backup"       #备份及rootfs下载目录
MAINPATH="${HOME}/.ntool"      #主目录
RAWURL="https://raw.githubusercontent.com/nnyyaa/ntool/main"       #GitHub raw地址(我是一只懒懒的猫猫)

if [ "${ARCH}" != "arm64" ];then
    dialog --noshadow --title "ntool-tui:WARNING" --msgbox "你的架构是${ARCH}而不是arm64\n通常来说这会造成问题,但是我已竭力适配不同的架构了\n你可以测试一下" 15 70
elif [ "${OS}" != "Android" ];then
    dialog --title "ntool-tui:WARNING" -msgbox "我还没适配除了Android以外的系统呢..."
    exit 0
fi
for pkgf in apt pacman yum;do
    if command -v $pkgf > /dev/null;then
        pkg="${pkgf}"
        if [ "${pkg}" == "apt" ];then
            pkgi="apt install"
            pkguni="apt purge"
            pkgup="apt update && apt upgrade"
        fi
    fi
done
cd ${HOME}
mkdir -p .ntool
#以下是shitcode之我自己都不认识的function（）
function wait_for_dev_page(){
    dialog --noshadow --title "ntool-tui:developing page" --msgbox "正在开发" 15 70
}

function check_if_not_android_warning(){
    if [ "${OS}" != "Android" ];then
        dialog --noshadow --title "ntool-tui:WARNING" --msgbox "未适配linux的功能,终止运行" 15 70
        exit 0
    fi
}

function bad_empty_input(){
    dialog --noshadow --title "ntool-tui:WARNING" --msgbox "严重错误:不允许的空选项" 15 70
}

function patch_frame_choose(){
    if (dialog --noshadow --title "ntool-tui:WARNING" --yesno "你在使用一个测试功能\n你确定要继续吗" 15 70);then
        PATCHCHOICE=$(dialog --noshadow --output-fd 1 --title "ntool-tui:选择patch框架" --yes-label "XPatch" --no-label "LSPatch" --yesno "基于Java，选择任何一个选项都将安装OpenJdk17\n本页面用于免root使用lsp或xp注入应用\nLSPatch的应用仅支持安卓9及以上但较为稳定\nXPatch则是几乎全版本支持但稳定性不好,支持的模块也大大少于LSPatch" 15 70)
        exitstatus=$?
        if [ $exitstatus != 0];then
            termux_main_page
        fi
        case $PATCHCHOICE in
            1)
                PATCHFRAME="xpatch"
                ;;
            2)
                PATCHFRAME="lspatch"
                ;;
        esac
    else
        termux_main_page
    fi
     install openjdk-17 -y
    patch_apk
}

function patch_apk(){
    APKPATH=$(dialog --noshadow --output-fd 1 --title "ntool-tui:fast ${PATCHFRAME}" --inputbox "输入apk完整路径\n不是apk文件的上一级目录!!!" 15 70)
    exitstatus=$?
    if [ $exitstatus != 0 ];then
        patch_frame_choose
    elif [ -z $APKPATH ];then
        bad_empty_input
        patch_apk
    fi
    mkdir -p ${MAINPATH}/patchedapks
    cd ${MAINPATH}/patchedapks
    if [ ! -f ${PATCHFRAME}.jar ];then
        echo -e "${BLUE}获取最新版本号中${RESET}"
        if [ "$PATCHFRAME" == "xpatch" ];then
            tag=$(wget -qO- -t1 -T2 "https://api.github.com/repos/WindySha/Xpatch/releases/latest" | jq -r '.tag_name')
            echo -e "${GREEN}${PATCHFRAME}最新版为${tag}${RESET}"
            wget https://github.com/WindySha/Xpatch/releases/download/${tag}/xpatch-${tag}.jar -o xpatch.jar
        else
            tag=$(wget -qO- -t1 -T2 "https://api.github.com/repos/LSPosed/LSPatch/releases/latest" | jq -r '.tag_name')
            echo -e "${GREEN}${PATCHFRAME}最新版为${tag}${RESET}"
            wget https://github.com/LSPosed/LSPatch/releases/download/${tag}/lspatch.jar
        fi
    fi
    if [ ! -f ${APKPATH} ];then
        dialog --noshadow --title "ntool-tui:failed" --msgbox "无效的apk文件路径\n检查是否输入错误或有无给予内置存储权限" 15 70
        patch_apk
    fi
    MODULEPATH=$(dialog --noshadow --output-fd 1 --title "ntool-tui:选择模块" --inputbox "输入模块apk的完整路径\n不是apk文件的上一级目录!!!" 15 70)
    echo -e "${BLUE}可能${RED}较慢${RESET},请${GREEN}耐心等待${RESET}"
    if [ "$PATCHFRAME" == "xpatch" ];then
        java -jar ${MAINPATH}/patchedapks/xpatch.jar ${APKPATH} -xm ${MODULEPATH} -o /sdcard/xpatchedapk.apk
        rm ${MAINPATH}/patchedapks/xpatch.jar
    else
        java -jar ${MAINPATH}/patchedapks/lspatch.jar ${APKPATH} -m ${MODULEPATH} -o /sdcard
        rm ${MAINPATH}/patchedapks/lspatch.jar
    fi
    echo -e "${GREEN}完成!修改后的apk${BLUE}在这里↑↑↑↑↑上面${RESET}"
    read -p "按回车继续"
    exit 0
}

function backup_page(){      #备份页面function
    clear
    backup_page_choice=$(dialog --noshadow --output-fd 1 --title "ntool-tui:backup page" --menu "选择一个以继续" 15 70 8 \
    "0" "返回脚本主页" \
    "1" "备份termux" \
    "2" "恢复备份" \
    "3" "删除备份" )
    exitstatus=$?
    if [ $exitstatus != 0 ];then
        termux_main_page
    fi
    case $backup_page_choice in
        0)
            termux_main_page
            ;;
        1)
            BACKUP_NAME=$(dialog --noshadow --output-fd 1 --title "ntool-tui:backup name" --inputbox "输入备份名(仅备份com.termux/files以提高速度) " 15 70)
            exitstatus=$?
            if [ $exitstatus != 0 ];then
                backup_page
            elif  [ -z $BACKUP_NAME ];then
                bad_empty_input
                backup_page
            fi
        	cd ~
        	if command -v tar > /dev/null;then
                if [ -d storage ];then
                    dialog --noshadow --title "ntool-tui:tips" --msgbox "备份可能会很慢,请耐心等待" 15 70
                    cd /data/data/com.termux/
                    tar -cvpzf ${STORAGEPATH}/${BACKUP_NAME}.tgz files
                    echo -e "${GREEN}计算sha1...${RESET}"
                    sha1sum ${STORAGEPATH}/${BACKUP_NAME}.tgz > ${STORAGEPATH}/${BACKUP_NAME}.tgz.sha
    				echo -e "${GREEN}完成备份${RESET}"
                    read -p  "按任意键退出"
                    backup_page
                else
                    echo -e "${RED}termux-setup-storage未执行${RESET}"
                    echo -e "${BLUE}执行中...${RESET}"
                    sleep 2
    				termux-setup-storage
                    echo "${GREEN}完成${RESET}"
                    sleep 1 
                    backup_page
                fi
            else
                echo "tar未安装"
                echo "start installing..."
    			${pkgi} tar -y 
                backup_page
            fi
            ;;
        2)
            RESTORE_PATH=$(dialog --noshadow --output-fd 1 --title "ntool-tui:输入完整目录！" --inputbox ${STORAGEPATH} 15 70)
            exitstatus=$?
            if [ $exitstatus != 0 ];then
                backup_page
                exit 0
            elif [ -z $RESTORE_PATH ];then
                bad_empty_input
                backup_page
            fi 
            cd ~
            echo "比对sha中..."
            sha1sum -c ${RESTORE_PATH}.sha >> /dev/null 2>&1
            exitstatus=$?
            if [ $exitstatus = 0 ];then 
                echo -e "${GREEN}sha正常${RESET}"
                echo "${GREEN}3${BLUE}秒后开始恢复${RESET}"
                sleep 3
                tar -xvpzf ${RESTORE_PATH} -C /data/data/com.termux/
                echo -e  "${GREEN}完成，重启生效，按回车以退出${RESET}"
            else
                dialog --noshadow --title "ntool-tui:WARNING" --msgbox "警告:不匹配的sha值!不进行恢复" 15 70
                backup_page 
            fi
            ;;
        3)
            DEL_BACKUP_PATH=$(dialog --noshadow --output-fd 1 --title "ntool-tui:输入完整目录" --fselect ${STORAGEPATH} 15 70)
            exitstatus=$?
            if [ $exitstatus != 0 ];then
                backup_page
            elif [ -z $DEL_BACKUP_PATH ];then
                bad_empty_input
                backup_page
            fi 
            rm -v ${DEL_BACKUP_PATH}
            rm -v ${DEL_BACKUP_PATH}.sha
            read -p "按任意键继续"
            backup_page
            ;;
    esac
}

function container_page(){      #容器OS选择
    CONTAINER_CHOICE=$(dialog --noshadow --output-fd 1 --title "ntool-tui:container installer" --menu "选择一个以继续" 15 70 8 \
    "1" "Ubuntu 我的存在是因为大家的存在" \
    "2" "Debian 为爱发电,爱的结晶" \
    "0" "返回上一页")       #我是鸽子咕咕咕，其他功能等我慢慢写
    exitstatus=$?
    if [ $exitstatus != 0 ];then
        main_page
    fi
    case $CONTAINER_CHOICE in
        0)
            termux_main_page
            ;;
        1)
            CONTAINER_OS=ubuntu
            ubuntu_version_page
            ;;
        2)
            CONTAINER_OS=debian
            debian_version_page
            ;;
    esac
}

function debian_version_page(){     #Debian版本选择
    DEBIAN_VER_CHOICE=$(dialog --noshadow --output-fd 1 --title "ntool-tui:Debian Version" --menu "选择一个以继续 \n同版本不可二次安装，不同版本可以哦" 15 70 8 \
    "1" "Debian10 Buster" \
    "2" "Debian11 Bullseye" \
    "0" "返回上一页")
    exitstatus=$?
    if [ $exitstatus != 0 ];then
        container_page
    fi
    case $DEBIAN_VER_CHOICE in
        0)
            container_page
            ;;
        1)
            VERCODE="10"
            VERNAME="buster"
            ;;
        2)
            VERCODE="11"
            VERNAME="bullseye"
            ;;
    esac
    container_control_page
}

function ubuntu_version_page(){     #Ubuntu版本选择
    cd ${MAINPATH}
    UBUNTU_VER_CHOICE=$(dialog --noshadow --output-fd 1 --title "ntool-tui:Ubuntu Version" --menu "选择一个以继续 15 60 8 \n同版本不可二次安装，不同版本可以哦" 15 70 7 \
    "1" "Ubuntu22.04 Jammy Jellyfish" \
    "2" "Ubuntu20.04 Focal Fossa" \
    "0" "返回上一页")
    exitstatus=$?
    if [ $exitstatus != 0 ];then
        container_page
    fi
    case $UBUNTU_VER_CHOICE in 
        0)
            container_page
            ;;
        1)
            VERCODE="22.04"
            VERNAME="jammy"
            ;;
        2)
            VERCODE="20.04"
            VERNAME="focal"
            ;;
    esac
    container_control_page
}

function container_control_page(){
    clear
    CCPAGECHOICE=$(dialog --noshadow --output-fd 1 --title "ntool-tui:container control" --menu "${CONTAINER_OS}${VERCODE} ${VERNAME}管理页面 \n选择一个以继续" 15 70 8 \
    "1" "安装" \
    "2" "卸载" \
    "0" "返回上一页")
    exitstatus=$?
    if [ $exitstatus != 0 ];then
        container_page
    fi
    case $CCPAGECHOICE in
        0)
            container_page
            ;;
        1)
            if [ -d ${CONTAINER_OS}-${VERNAME} ];then
                dialog --noshadow --title "ntool-tui:WARNING" --msgbox "不允许的二次安装" 15 70
                container_control_page
            fi
            container_install
            exit 0
            ;;
        2)
            if [ ! -d ${CONTAINER_OS}-${VERNAME} ];then
                dialog --noshadow --title "ntool-tui:WARNING" --msgbox "你还没有安装这个容器" 15 70
                container_control_page
            fi
            dialog --title "ntool-tui:WARNING" --defaultno --yesno "警告！\n这会删除你在容器里的全部数据\n如果你不知道你在干什么，请取消" 15 70
            container_delete
            exit 0
            ;;
    esac
}

function container_delete(){
    rm -rvf ${MAINPATH}/${CONTAINER_OS}-${VERNAME}
    rm -v $PREFIX/bin/start${VERNAME}
    dialog --noshadow --title "ntool-tui:success" --msgbox "删除完成" 15 70
    container_page
}

function script_write(){
cat << EOF > $PREFIX/bin/start${VERNAME}
#!/data/data/com.termux/files/usr/bin/bash
#ntool ${CONTAINER_OS}${VERCODE}:${VERNAME}启动脚本
#嗯...复制也是可以的啦...我不在意...
#毕竟这东西没什么技术含量的啦...
cd ~/.ntool
unset LD_PRELOAD
COMMAND="proot"
COMMAND+=" --link2symlink"
COMMAND+=" -0"
COMMAND+=" -r ${CONTAINER_OS}-${VERNAME}"
COMMAND+=" -b /dev"
COMMAND+=" -b /sys"
COMMAND+=" -b /proc"
#不建议直接挂载sdcard
#有隐私问题
#COMMAND+=" -b /sdcard"
#默认不挂载本机目录
#下面一行为仅挂载termux里的HOME(默认注释)
#COMMAND+=" -b /data/data/com.termux/files/home:/root"
COMMAND+=" -w /root"
COMMAND+=" /usr/bin/env -i"
COMMAND+=" HOME=/root"
COMMAND+=" PATH=/usr/local/sbin:/usr/local/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/games:/usr/local/games"
COMMAND+=" TERM=xterm-256color"
COMMAND+=" LANG=C.UTF-8"
COMMAND+=" /bin/bash -l"
echo -e "${GREEN}---------starting---------${RESET}"
EOF
echo 'exec $COMMAND' >> ${PREFIX}/bin/start${VERNAME}
}

function write_group_add(){
cat << EOF > ${MAINPATH}/${CONTAINER_OS}-${VERNAME}/etc/.ntool/groupadd.sh
groupadd -g 3003 inet
groupadd -g 9997 everybody
groupadd -g 20123 u0_a123_cache
groupadd -g 50123 all_a123
groupadd -g 99909997 u999_everybody
sed -i '/groupadd.sh/d' /etc/bash.bashrc
rm -rf /etc/.ntool
EOF
}

function container_install(){
    pkgup
    if command -v aria2c > /dev/null;then
        ${pkgi} aria2 -y
    fi
    mkdir -p ${MAINPATH}
    echo -e "${GREEN}稍等，正在检查选择${CONTAINER_OS}的最新rootfs...${RESET}"
    LATESTROOTFS=$(curl https://mirrors.bfsu.edu.cn/lxc-images/images/${CONTAINER_OS}/${VERNAME}/${ARCH}/default/ 2> /dev/null | gawk '{print $3}' | tail -n 3 | head -n 1 | gawk -F '"' '{print $2}' | gawk -F '/' '{print $1}')
    echo -e "最新版(时间):${GREEN}${LATESTROOTFS}${RESET}"
    echo -e "请${GREEN}耐心${RESET}等待,而${RED}不要ctrl-c或其他方式终止${RESET}"
    cd ${MAINPATH}
    if [ -f ${CONTAINER_OS}-${VERNAME}*.tar.xz ];then
        echo -e "${BLUE}发现存在的rootfs.删除中...${RESET}"
        rm ${CONTAINER_OS}-${VERNAME}*.tar.xz
    fi
    aria2c https://mirrors.bfsu.edu.cn/lxc-images/images/${CONTAINER_OS}/${VERNAME}/${ARCH}/default/${LATESTROOTFS}/rootfs.tar.xz -o ${CONTAINER_OS}-${VERNAME}.tar.xz
    mkdir -p ${CONTAINER_OS}-${VERNAME}
    tar -xvf ${CONTAINER_OS}-${VERNAME}.tar.xz -C ${MAINPATH}/${CONTAINER_OS}-${VERNAME}
    echo -e "${GREEN}写入启动脚本中${RESET}"
    sleep 0.3
    script_write
    echo -e "${GREEN}写入dns中${RESET}"
    sleep 0.3
    mkdir -p ${CONTAINER_OS}-${VERNAME}/run/systemd/resolve/
    #淦哦Ubuntu的rootfs解压后会出现err导致resolv.conf硬链接失效,只能手动创建文件夹然后重新写入
    echo "nameserver 8.8.8.8" > ${CONTAINER_OS}-${VERNAME}/etc/resolv.conf
    echo "nameserver 8.8.8.8" > ${CONTAINER_OS}-${VERNAME}/run/systemd/resolve/stub-resolv.conf
    sleep 0.3
    echo -e "${GREEN}换源中,使用BFSU北京外国语大学镜像站${RESET}"
    case $CONTAINER_OS in
        ubuntu)
            sed -i 's/ports.ubuntu.com/mirrors.bfsu.edu.cn/g' ${MAINPATH}/${CONTAINER_OS}-${VERNAME}/etc/apt/sources.list
            ;;
        debian)
            sed -i 's/deb.debian.org/mirrors.bfsu.edu.cn/g' ${MAINPATH}/${CONTAINER_OS}-${VERNAME}/etc/apt/sources.list
            ;;
    esac
    sleep 0.3
    echo -e "${GREEN}给予脚本执行权限${RESET}"
    chmod +x ${PREFIX}/bin/start${VERNAME}
    sleep 0.3
    echo -e "${GREEN}删除rootfs中${RESET}"
    rm ${CONTAINER_OS}-${VERNAME}.tar.xz > /dev/null 2>&1
    sleep 0.3
    echo -e "${GREEN}写入配置脚本中${RESET}"
    if [ "$CONTAINER_OS" == "ubuntu" ] || [ "CONTAINER_OS" == "debian" ];then
        write_group_add
        echo ". setup.sh" >> ${MAINPATH}/${CONTAINER_OS}-${VERNAME}/etc/profile
        cat >> ${MAINPATH}/${CONTAINER_OS}-${VERNAME}/root/setup.sh <<- EOF
        echo -e "${GREEN}正在配置，请稍等${RESET}"
        bash /etc/.ntool/groupadd.sh
        apt update
        apt upgrade
        apt install apt-transport-https -y
        cd /usr/bin
        mv `ls | grep perl` perl
        apt install ca-certificates -y
        echo -e "${GREEN}将http换为https${RESET}"
        sed -i 's/http/https/g' /etc/apt/sources.list
        apt update
        apt install dialog whiptail wget curl aria2 -y
        sed -i '/setup.sh/d' /etc/profile
        echo -e "${GREEN}完成！开始使用你的${CONTAINER_OS}${VERCODE} ${VERNAME}${RESET}"
EOF
    fi
    sleep 0.3
    dialog --noshadow --title "ntool-tui:success" --msgbox "安装${CONTAINER_OS}${VERCODE} ${VERNAME}成功\n输入start${VERNAME}启动容器并进行配置" 15 70
}

function change_source_page(){       #换源
    SOURCE_CHOICE=$(dialog --noshadow --output-fd 1 --title "ntool-tui:change source" --menu "1.警告!这会重置你的源列表 \
    2.事实上,你可以使用termux-change-repo来换源,所以这里实际意义不大" 15 70 8 \
    "1" "使用termux-change-repo(推荐)" \
    "0" "返回上一页")
    exitstatus=$?
    if [ $exitstatus != 0 ];then
        other_tool_page 
    elif [ -z $SOURCE_CHOICE ];then
        other_tool_page
    fi
    case $SOURCE_CHOICE in 
        0)
            other_tool_page
            ;;
        1)
            termux-change-repo
            exit 0
            ;;
    esac
}

function desktop_page(){
    clear
    if command -v pip > /dev/null;then
        DESKTOP_CHOICE=$(dialog --noshadow --output-fd 1 --title "ntool-tui:desktop install" --menu "选择一个以继续" 15 70 8 \
        "1" "安装xfce(**较为完整**而**不是完全完整**的图形环境)" \
        "2" "仅安装openbox(基础图形环境)" \
        "0" "返回脚本主页面")
        exitstatus=$?
        if [ $exitstatus != 0 ];then
            termux_main_page
        fi
        case $DESKTOP_CHOICE in
        0)
            termux_main_page
            ;;
        1)
            echo "安装中..."
            ${pkgi} openbox pypanel xorg-xsetroot xfce tigervnc -y 
            pip install PyXDG
            cd /data/data/com.termux/files/usr/bin
            echo -e "${BLUE}获取启动脚本中...${RESET}"
            wget ${RAWURL}/desktop/startxfce -O startxfce > /dev/null 2>&1
            chmod +x startxfce
            echo -e "${GREEN}完成${RESET}"
            echo -e "输入${GREEN}startxfce${RESET}以启动xfce"
            cd ~
            read -p "按任意键以继续"
            exit 0
            ;;
        2)
            ${pkgi} openbox pypanel xorg-xsetroot tigervnc -y
            pip install PyXDG
            cd /data/data/com.termux/files/usr/bin
            echo -e "${BLUE}获取启动脚本中...${RESET}"
            wget ${RAWURL}/desktop/startopenbox -O startopenbox > /dev/null 2>&1
            chmod +x startopenbox
            echo -e "${GREEN}完成${RESET}"
            echo -e "输入${GREEN}startopenbox${RESET}以启动"
            cd ~
            read -p "按任意键以继续"
            exit 0
            ;;
        3)
            wait_for_dev_page
            desktop_page
            ;;
        esac
    else
            ${pkgi} python -y
    fi
}

function other_tool_page(){			#这里是其他功能页的function
    OTPC=$(dialog --noshadow --output-fd 1 --title "ntool-tui:other tool page" --menu "选择一个以继续" 15 70 8 \
    "1" "网络页面" \
    "2" "工具页面" \
    "3" "换源" \
    "0" "返回上一页")
    exitstatus=$?
    if [ $exitstatus != 0 ];then
        termux_main_page
    fi
    case $OTPC in 
        0)
		    termux_main_page
            ;;
        1)
            web_page
            ;;
	    2)
	    	tool_page
		    ;;
        3)
            change_source_page
    esac
}

function ssh_check_install(){
	clear
	if command -v ssh;then
		dialog --noshadow --title "ntool-tui:ssh check" --msgbox "ssh功能较少,BUG多多,慎用" 15 70
		ssh_page
	else
		echo "${RED}未安装ssh客户/服务端${RESET}"
		echo "${GREEN}安装中...${RESET}"
		${pkgi} openssh -y 
        echo -e "${GREEN}"
        echo "完成"
        read -p "按任意键以继续"
        echo -e "${RESET}"
		ssh_check_install
	fi
}

function ssh_page(){
	clear
    SSH_CHOICE=$(dialog --noshadow --output-fd 1 --title "ntool-tui:ssh page" --menu "选择一个以继续" 15 70 8 \
    "1" "打开sshd服务(让他人连接)" \
    "2" "通过密码连接远程服务器" \
    "3" "生成密钥" \
    "0" "返回上一页")
    exitstatus=$?
    if [ $exitstatus != 0 ];then
        tool_page
    fi
	case $SSH_CHOICE in
		0)
			tool_page
			;;
		1)
			sshd
            echo -e "${GREEN}"
			read -p "启动完成 按任意键继续"
            echo -e "${RESET}"
			exit 0
			;;
		2)
			if command -v sshpass;then
				read -p "输入远程服务器ip/域名:" ssh_ip
				read -p "输入要登陆的用户名:" ssh_user
				read -p "输入ssh端口:" ssh_port
				read -p "输入密码:" ssh_passwd
				echo "please wait..."
				sshpass -p ${ssh_passwd} ssh ${ssh_user}@${ssh_ip} -p ${ssh_port}
			else
				echo "sshpass未安装"
				echo "installing..."
                ${pkgi} sshpass -y
				ssh_page
			fi
			;;
		3)
            wait_for_dev_page
            ssh_page
			;;
	esac
}

function tool_page(){			#这里是其它工具-工具类页面的function
	clear
    TPC=$(dialog --noshadow --output-fd 1 --title "ntool-tui:tool page" --menu "选择一个以继续" 15 70 8 \
    "1" "ping" \
    "2" "ping6" \
    "3" "文件查找" \
    "4" "安装openjdk17" \
    "5" "ssh功能" \
    "6" "?" \
    "00" "打开该项目地址(?)" \
    "0" "返回上一页")
    exitstatus=$?
    if [ $exitstatus != 0 ];then
        other_tool_page
    fi
	case $TPC in
		0)
			other_tool_page
			;;
		00)
			echo "启 动 私 货"
			echo "记得给我点个star哦"
			am start -a android.intent.action.VIEW -d https://github.com/nnyyaa/ntool > /dev/null 2>&1
			;;

		1)
			if command -v ping > /dev/null;then
                local ip=$(dialog --noshadow --output-fd 1 --title "ntool-tui:ping-ip" --inputbox "输入要进行ping的IP/域名(必填)"15 70)
                local time=$(dialog --noshadow --output-fd 1 --title "ntool-tui:ping-time" --inputbox "输入要ping的次数(选填)" 15 70)
                local speed=$(dialog --noshadow --output-fd 1 --title "ntool-tui:ping-speed" --inputbox "输入ping的速度(选填)（以秒为单位，省略符号，无root最快0.2）" 15 70)
                local size=$(dialog --noshadow --output-fd 1 --title "ntool-tui:ping-packet-szie" --inputbox "输入ping包大小(选填)(以字节为单位，最大65507)" 15 70)
                if [ -z $ip ] || [ -z $time ] || [ -z $speed ] || [ -z $size ];then
                    bad_empty_input
                    tool_page
                else 
                    echo -e "${BLUE}start ping${RESET}"
    				ping -i ${speed} -c${times} -s ${size} ${ip}
	    			echo -e "${GREEN}stop ping${RESET}"
                fi
			else
				echo "未安装ping，正在安装..."
				${pkgi} termux-tools -y
				tool_page
			fi
			;;
		2)
			if command -v ping6 > /dev/null;then
                local ip=$(dialog --noshadow --output-fd 1 --title "ntool-tui:ping6-ip" --inputbox "输入要进行ping6的IP/域名(必填)"15 70)
                local time=$(dialog --noshadow --output-fd 1 --title "ntool-tui:ping6-time" --inputbox "输入要ping6的次数(选填)" 15 70)
                local speed=$(dialog --noshadow --output-fd 1 --title "ntool-tui:ping6-speed" --inputbox "输入ping6的速度(选填)（以秒为单位，省略符号，无root最快0.2）" 15 70)
                local size=$(dialog --noshadow --output-fd 1 --title "ntool-tui:ping6-packet-szie" --inputbox "输入ping6包大小(选填)(以字节为单位，最大65507)" 15 70)
                if [ -z $ip ] || [ -z $time ] || [ -z $speed ] || [ -z $size ];then
                    bad_empty_input
                    tool_page
                else
                    echo -e "${BLUE}start ping${RESET}"
                    ping6 -i ${speed} -c${time} -s ${size} ${ip}
                    echo -e "${GREEN}stop ping${RESET}"
                fi
			else
				echo "ping6未安装,正在安装..."
				${pkgi} termux-tools -y
				tool_page
			fi
			;;
		3)
            local filename=$(dialog --noshadow --output-fd 1 --title "ntool-tui:find file" --inputbox "输入你要搜索的文件:" 15 70)
            local filepath=$(dialog --noshadow --output-fd 1 --title "ntool-tui:find file" --inputbox "输入你要搜索的目录:" 15 70)
            if [ -z $filename ] || [ -z $filepath ];then
                bad_empty_input
            fi
			echo -e "${BLUE}搜索中${RESET}"
            echo -e "可能${RED}较慢${RESET},请${GREEN}耐心等待${RESET}"
            echo -e "${BLUE}搜索中${RESET}"
            result=$(find -name ${filename} ${filepath})
            echo "${result}" > ~/filesearchresult
            echo -e "${GREEN}完成${RESET}"
            echo -e "${BLUE}结果:${RESET}\n${result}"
            echo -e "${GREEN}复制一份于~/filesearchresult"
            read -p "按回车继续"
            echo -e "$RESET"
            tool_page
			;;
		4)
			echo "只支持openjdk17"
			read -p "按任意键以继续"	#我好水啊（）
			${pkgi} openjdk-17 -y
			echo "安装完成"
			;;
		5)
			ssh_check_install
			;;
		6)
			echo -e "${PINK}你为什么要选择一个'?'选项啊喂!"
			sleep 2
			echo -e "真是个笨蛋!!${RESET}"
			sleep 2
			tool_page
			;;
	esac
    exit 0
}

function check_update(){			#这里是检查/升级的function
    cd ${MAINPATH}
    if [ ! -a local_version ];then
        echo "ERROR" > local_version
    fi
    if [ "`cat latest_version`" != "`cat local_version`" ];then
        if (dialog --noshadow --title "ntool-tui:update" --yesno "你的版本不是最新版。是否更新？ \n最新版:`cat latest_version` \n本地版本:`cat local_version`" 15 70);then 
            bash -c "$(curl https://raw.githubusercontent.com/nnyyaa/ntool/main/install.sh)"
        else
            termux_main_page
        fi
    else
        dialog --noshadow --title "ntool-tui:check update" --msgbox "你的版本为最新版，无需更新" 15 70
        termux_main_page
    fi 
}

function web_page(){				#这里是其他功能-网络类页面function
	clear
	#echo "这里是最水的页面（doge）"
    webc=$(dialog --noshadow --output-fd 1 --title "ntool-tui:web page" --menu "选择一个以继续" 15 70 8 \
    "1" "安装Nginx" \
    "2" "安装Apache2" \
    "3" "安装php环境" \
    "4" "安装MySQL(mariadb)" \
    "0" "返回上一页")
    exitstatus=$?
	if [ $exitstatus != 0 ];then
        other_tool_page
    fi
	case $webc in
		0)
			other_tool_page
			;;
		1)
			${pkgi} nginx -y
			echo "done"
			;;
		2)
			${pkgi} apache2 -y
			echo "done"
			;;
		3)
			${pkgi} php -y
			echo "done"
			;;
		4)
			${pkgi} mariadb -y
			echo "done"
			;;
	esac
}

function termux_main_page(){
    clear
    cd ${MAINPATH}
    mainchoice=$(dialog --noshadow --output-fd 1 --title "ntool-tui:main page" --menu "一言:`curl https://v1.hitokoto.cn/?encode=text 2>/dev/null` \n选择一个以继续" 15 70 8  \
    "1" "已烂尾的容器功能" \
    "2" "其它功能" \
    "3" "备份功能" \
    "4" "计算圆周率(好水)" \
    "5" "一言" \
    "6" "原系统桌面" \
    "7" "LSPatch/XPatch功能" \
    "00" "更新" \
    "0" "退出")
    exitstatus=$?
    if [ $exitstatus != 0 ];then
        echo -e "${BLUE}bye${RESET}"
        exit 0
    fi
    case $mainchoice in 
        00)
	        check_update
        	;;
        0)
            echo -e "${BLUE}bye${RESET}"
            exit 0
            ;;
        1)
            container_page
            ;;
        2)
            other_tool_page
            ;;
        3)
            check_if_not_termux_warning
            backup_page
            ;;
        4)
            if command -v bc > /dev/null;then
                local BC=$(dialog --noshadow --title "ntool-tui:bc PI" --inputbox "输入计算位数    越往后面算的越慢" 15 70 3>&1 1>&2 2>&3)
                exitstatus=$?
                if [ $exitstatus != 0 ];then
                    termux_main_page
                fi
                echo "计算开始时间:`date '+%Y-%m-%d %H:%M:%S'`" >> ~/.ntool/pi.txt
                echo "scale=${BC}; 4*a(1)" | bc -l -q >> ~/.ntool/pi.txt
                echo "计算结束时间:`date '+%Y-%m-%d %H:%M:%S'`" >> ~/.ntool/pi.txt
                dialog --noshadow --title "ntool-tui:success" --msgbox "完成!计算结果可在~/.ntool/pi.txt看到" 15 70
                termux_main_page
            else
                ${pkgi} bc
                termux_main_page
            fi
            ;;
        5)
            dialog --noshadow --title "ntool-一言" --msgbox "`curl https://v1.hitokoto.cn/?encode=text 2>/dev/null`" 15 70
            termux_main_page
            ;;
        6)
            check_if_not_android_warning
            desktop_page
            ;;
        7)
            patch_frame_choose
            ;;
    esac
}
clear
echo -e "${GREEN}正在获取最新版本号...${RESET}"
cd ${HOME}
mkdir -p .ntool
cd .ntool
wget ${RAWURL}/version -O latest_version > /dev/null 2>&1
termux_main_page
exit 0
