#!/data/data/com.termux/files/usr/bin/bash
####################
#                  #
#  屎  山  代  码  #
#                  #
####################
#也许你不知道，但这是一个高中生在课余时间写的一个垃圾屎山脚本
#代码虽然是自己敲的
#但是真的好jb的乱
#以这也(一)许(定)后会成为一个烂尾工程吧
#
#以下颜色代码为预设
RED="\E[1;31m"      # 红
GREEN="\E[1;32m"     # 绿
YELOW="\E[1;33m"    # 黄
BLUE="\E[1;34m"     # 蓝
PINK="\E[1;35m"     # 粉
RESET="\E[0m"          # 去色
ARCH="`dpkg --print-architecture`"       #架构
OS="`uname -o`"     #系统
if [ "$OS" == "aarch64" ];then
    OS="arm64"
fi
STORAGEPATH="/storage/emulated/0/Download/backup"       #备份及rootfs下载目录
MAINPATH="/data/data/com.termux/files/home/.ntool"      #主目录
RAWURL="https://raw.githubusercontent.com/nnyyaa/ntool/main/"       #GitHub raw地址(我是一只懒懒的猫猫)

if [ "${ARCH}" != "aarch64" ];then
    whiptail --title "ntool-tui:WARNING" --msgbox "未适配的架构:${ARCH}" 0 0
fi

cd ${HOME}
#以下是标准屎山之我自己都不认识的function（）
function wait_for_dev_page(){
    whiptail --title "ntool-tui:developing page" --msgbox "正在开发" 0 0
}

function bad_empty_input(){
    whiptail --title "ntool-tui:WARNING" --msgbox "严重错误:不允许的空选项" 0 0 
}

function backup_page(){      #备份页面function
    clear
    backup_page_choice=$(whiptail --title "ntool-tui:backup page" --menu "选择一个以继续" 0 0 0 \
    "0" "返回脚本主页" \
    "1" "备份termux" \
    "2" "恢复备份" \
    "3" "删除备份" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 1 ];then
        main_page
    fi
    case $backup_page_choice in
        0)
            main_page
            ;;
        1)
            BACKUP_NAME=$(whiptail --title "ntool-tui:backup name" --inputbox "输入备份名(仅备份$PREFIX以提高速度)" 0 0 3>&1 1>&2 2>&3)
            exitstatus=$?
            if [ $exitstatus = 1 ];then
                backup_page
            elif  [ -z $BACKUP_NAME ];then
                bad_empty_input
                backup_page
            fi
        	cd ~
        	if command -v tar > /dev/null;then
                if [ -d storage ];then
                    whiptail --title "ntool-tui:tips" --msgbox "备份可能会很慢,请耐心等待" 0 0
                    cd /data/data/com.termux/
                    tar -cvpzf ${STORAGEPATH}${BACKUP_NAME}.tgz files
                    echo -e "${GREEN}计算sha1...${RESET}"
                    sha1sum ${STORAGEPATH}/${BACKUP_NAME}.tgz > ${STORAGEPATH}/${BACKUP_NAME}
                    echo "名称:${BACKUP_NAME}" >> ${MAINPATH}/backups.txt
    				echo -e "${GREEN}完成备份${RESET}"
                    backup_page
                else
                    echo "termux-setup-storage未执行"
                    echo "执行中..."
                    sleep 2
    				termux-setup-storage
                    echo "done"
                    sleep 1 
                    backup_page
                fi
            else
                echo "tar未安装"
                echo "start installing..."
    			apt install tar -y 
                backup_page
            fi
            ;;
        2)
            RESTORE_NAME=$(whiptail --title "ntool-tui:restore backup" --inputbox "选择一个备份 \
            `ls ${STORAGEPATH}/*.tgz`" 30 60 3>&1 1>&2 2>&3)
            exitstatus=$?
            if [ $exitstatus = 1 ];then
                backup_page
            elif [ -z $RESTORE_NAME ];then
                bad_empty_input
                backup_page
            fi 
            cd ~
            echo "比对sha中..."
            sha1sum -c ${STORAGEPATH}/${RESTORE_NAME} >> /dev/null 2>&1
            exitstatus=$?
            if [ $exitstatus = 0 ];then 
                echo -e "${GREEN}sha正常${RESET}"
                echo "${BLUE}开始恢复${RESET}"
                tar -xvpzf ${STORAGEPATH}/${RESTORE_NAME}.tgz -C /data/data/com.termux/
                echo -e  "${GREEN}完成，重启生效，按回车以退出${RESET}"
            else
                whiptail --title "ntool-tui:WARNING" --msgbox "警告:不匹配的sha值!不进行恢复" 0 0
                backup_page 
            fi
            ;;
        3)
            DEL_BACKUP_NAME=$(whiptail --title "ntool-tui:delete backup" --inputbox "选择一个备份 \
            `ls ${STORAGEPATH}/*.tgz`" 30 60 3>&1 1>&2 2>&3)
            exitstatus=$?
            if [ $exitstatus = 1 ];then
                backup_page 
            elif [ -z $DEL_BACKUP_NAME ];then
                bad_empty_input
                backup_page
            fi 
            rm -v ${STORAGEPATH}/${DEL_BACKUP_NAME}.tgz
            rm -v ${STORAGEPATH}/${DEL_BACKUP_NAME}
            read -p "按回车继续"
            backup_page
            ;;
    esac
}

function container_page(){      #容器OS选择
    CONTAINER_CHOICE=$(whiptail --title "ntool-tui:container installer" --menu "选择一个以继续" 0 0 0 \
    "1" "Ubuntu" \
    "2" "Debian" \
    "0" "返回上一页" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 1 ];then
        main_page
    fi
    case $CONTAINER_CHOICE in
        0)
            main_page
            ;;
        1)
            ubuntu_install_page
            ;;
        2)
            debian_install_page
            ;;
        0)
            main_page
            ;;
    esac
}

function ubuntu_install_page(){
    cd ${MAINPATH}
    UBUNTU_CHOICE=$(whiptail --title "ntool-tui:install Ubuntu" --menu "选择一个以继续  仅支持jammy(22.04)和focal(20.04)" 0 0 0 \
    "1" "Ubuntu22.04 Jammy Jellyfish" \
    "2" "Ubuntu20.04 Focal Fossa" \
    "0" "返回上一页" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 1 ];then
        container_page
    fi
    case $UBUNTU_CHOICE in 
        0)
            container_page
            ;;
        1)
            VERCODE="22.04"
            VERNAME="jammy"
            ;;
        2)
            VERCODE="20.04"
            VERNAME="focal"
            ;;
    esac
    if [ -d ubuntu-${VERNAME} ];then 
        whiptail --title "ntool-tui:WARNING" --msgbox "不允许的二次安装" 0 0 
    elif command -v ariac > /dev/null;then
        echo -e "${GREEN}apt install aria2 -y${RESET}"
    fi
    apt update -y 
    apt upgrade -y 
    echo -e "${GREEN}稍等，正在检查最新rootfs${RESET}"
    ROOTFSTIME=$(curl https://mirrors.bfsu.edu.cn/lxc-images/images/ubuntu/${VERNAME}/${ARCH}/default/ | gawk '{print $3}' | tail -n 3 | head -n 1 | gawk -F '"' '{print $2}' | gawk -F '/' '{print $1}')
    echo -e "最新版(时间):${GREEN}${ROOTFSTIME}${RESET}"
    aria2c https://mirrors.bfsu.edu.cn/lxc-images/images/ubuntu/${VERNAME}/${ARCH}/default/${ROOTFSTIME}/rootfs.tar.xz -o ${STORAGEPATH}/ubuntu-${VERNAME}.tar.xz
    tar -xvf ${STORAGEPATH}/ubuntu-${VERNAME}.tar.xz ${MAINPATH}/ubuntu-${VERNAME}
    echo -e "请${GREEN}耐心${RESET}等待,而${RED}不要ctrl-c${RESET}"
    echo -e "${BLUE}获取启动脚本中${RESET}"
    curl ${RAWURL}/script/startubuntu -o ${PREFIX}/bin
    chmod +x ${PREFIX}/bin/startubuntu
    whiptail --title "ntool-tui:success" --msgbox "安装完成,输入startubuntu以启动" 0 0 
}

function debian_install_page(){
    wait_for_dev_page
    container_page
}

function change_source_page(){       #换源
    SOURCE_CHOICE=$(whiptail --title "ntool-tui:change source" --menu "事实上,你可以使用termux-change-repo来换源,所以这里实际意义不大" 0 0 0 \
    "1" "USTC 中国科技大学镜像站" \
    "2" "BFSU 北京外国语大学镜像站" \
    "3" "TUNA 清华大学镜像站" \
    "4" "Njupt 南京邮电大学镜像站" \
    "5" "Aliyun 阿里云镜像站" \
    "0" "返回上一页" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 1 ];then
        other_tool_page
    elif [ -z $SOURCE_CHOICE ];then
        other_tool_page
    fi
    case $SOURCE_CHOICE in 
        0)
            other_tool_page
            ;;
        1)
            MIRRORSITE="mirrors.ustc.edu.cn"
            ;;
        2)
            MIRRORSITE="mirrors.bfsu.edu.cn"
            ;;
        3)
            MIRRORSITE="mirrors.tuna.tsinghua.edu.cn"
            ;;
        4)
            MIRRORSITE="mirrors.njupt.edu.cn"
            ;;
        5)
            MIRRORSITE="mirrors.aliyun.com"
            ;;
    esac
    sed -i 's@^\(deb.*stable main\)$@#\1\ndeb https://${MIRRORSITE}/termux/apt/termux-main stable main@' $PREFIX/etc/apt/sources.list
    apt update -y
    apt upgrade -y
    whiptail --title "ntool-tui:change source success" --msgbox  "完成"
    change_source_page
}

function desktop_page(){
    clear
    DESKTOP_CHOICE=$(whiptail --title "ntool-tui:desktop install" --menu "选择一个以继续" 0 0 0 \
    "1" "安装xfce(较为完整的图形环境)" \
    "2" "仅安装openbox(基础图形环境)" \
    "0" "返回脚本主页面" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 1 ];then
        main_page
    fi
    case $DESKTOP_CHOICE in
    0)
        main_page
        ;;
    1)
        echo "安装中..."
        apt install openbox pypanel xorg-xsetroot xfce tigervnc -y 
        pip install PyXDG
        cd /data/data/com.termux/files/usr/bin
        echo -e "${BLUE}获取启动脚本中...${RESET}"
        wget ${RAWURL}/desktop/startxfce -O startxfce > /dev/null 2>&1
        chmod +x startxfce
        echo -e "${GREEN}完成${RESET}"
        echo -e "输入${GREEN}startxfce${RESET}以启动xfce"
        cd ~
        read -p "按回车以继续"
        ;;
    2)
        apt install openbox pypanel xorg-xsetroot tigervnc -y
        pip install PyXDG
        cd /data/data/com.termux/files/usr/bin
        echo -e "${BLUE}获取启动脚本中...${RESET}"
        wget ${RAWURL}/desktop/startopenbox -O startopenbox > /dev/null 2>&1
        chmod +x startopenbox
        echo -e "${GREEN}完成${RESET}"
        echo -e "输入${GREEN}startopenbox${RESET}以启动"
        cd ~
        read -p "按回车以继续"
        ;;
    3)
        wait_for_dev_page
        desktop_page
        ;;
    *)
        echo -e "${RED}未知选项${RESET}"
        main_page
        ;;
    esac
}

function other_tool_page(){			#这里是其他功能页的function
    OTPC=$(whiptail --title "ntool-tui:other tool page" --menu "选择一个以继续" 0 0 0 \
    "1" "网络页面" \
    "2" "工具页面" \
    "3" "换源" \
    "0" "返回上一页" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 1 ];then
        main_page
    fi
    case $OTPC in 
        0)
		    main_page
            ;;
        1)
            web_page
            ;;
	    2)
	    	tool_page
		    ;;
        3)
            change_source_page
    esac
}

function ssh_check_install(){
	clear
	if command -v ssh;then
		whiptail --title "ntool-tui:ssh check" --msgbox "ssh功能较少,BUG多多,慎用" 0 0
		ssh_page
	else
		echo "${RED}未安装ssh客户/服务端${RESET}"
		echo "${RED}安装中...${RESET}"
		apt install openssh -y 
        echo -e "${GREEN}"
        read -p "按回车以继续"
        echo -e "${RESET}"
		ssh_check_install
	fi
}

function ssh_page(){
	clear
    SSH_CHOICE=$(whiptail --title "ntool-tui:ssh page" --menu "选择一个以继续" 0 0 0 \
    "1" "打开sshd服务(让他人连接)" \
    "2" "通过密码连接远程服务器" \
    "3" "生成密钥" \
    "0" "返回上一页" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 1 ];then
        tool_page
    fi
	case $SSH_CHOICE in
		0)
			tool_page
			;;
		1)
			sshd
            echo -e "${GREEN}"
			read -p "启动完成 按任意键退出脚本"
            echo -e "${RESET}"
			exit 0
			;;
		2)
			if command -v sshpass;then
				read -p "输入远程服务器ip/域名:" ssh_ip
				read -p "输入要登陆的用户名:" ssh_user
				read -p "输入ssh端口:" ssh_port
				read -p "输入密码:" ssh_passwd
				echo "please wait..."
				sshpass -p ${ssh_passwd} ssh ${ssh_user}@${ssh_ip} -p ${ssh_port}
			else
				echo "sshpass未安装"
				echo "installing..."
				apt install sshpass -y
				ssh_page
			fi
			;;
		3)
            wait_for_dev_page
            ssh_page
			;;
	esac
}

function tool_page(){			#这里是其它工具-工具类页面的function
	clear
    TPC=$(whiptail --title "ntool-tui:tool page" --menu "选择一个以继续" 0 0 0 \
    "1" "ping" \
    "2" "ping6" \
    "3" "文件查找" \
    "4" "安装openjdk17" \
    "5" "ssh功能" \
    "6" "?" \
    "00" "打开该项目地址(?)" \
    "0" "返回上一页" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 1 ];then
        other_tool_page
    fi
	case $TPC in
		0)
			other_tool_page
			;;
		00)
			echo "启 动 私 货"
			echo "记得给我点个star哦"
			am start -a android.intent.action.VIEW -d https://github.com/nnyyaa/ntool > /dev/null 2>&1
			;;

		1)
			if command -v ping > /dev/null;then
                local ip=$(whiptail --title "ntool-tui:ping-ip" --inputbox "输入要进行ping的IP/域名(必填)" 0 0 3>&1 1>&2 2>&3)
                local time=$(whiptail --title "ntool-tui:ping-time" --inputbox "输入要ping的次数(选填)" 0 0 3>&1 1>&2 2>&3)
                local speed=$(whiptail --title "ntool-tui:ping-speed" --inputbox "输入ping的速度(选填)（以秒为单位，省略符号，无root最快0.2）" 0 0 3>&1 1>&2 2>&3)
                local size=$(whiptail --title "ntool-tui:ping-packet-szie" --inputbox "输入ping包大小(选填)(以字节为单位，最大65507)" 0 0 3>&1 1>&2 2>&3)
                if [ -z $ip ] || [ -z $time ] || [ -z $speed ] || [ -z $size ];then
                    bad_empty_input
                    tool_page
                fi
                echo -e "${BLUE}start ping${RESET}"
				ping -i ${speed} -c${times} -s ${size} ${ip}
				echo -e "${GREEN}stop ping${RESET}"
			else
				echo "未安装ping，正在安装..."
				apt install termux-tools -y
				tool_page
			fi
			;;
		2)
			if command -v ping6 > /dev/null;then
                local ip=$(whiptail --title "ntool-tui:ping6-ip" --inputbox "输入要进行ping6的IP/域名(必填)" 0 0 3>&1 1>&2 2>&3)
                local time=$(whiptail --title "ntool-tui:ping6-time" --inputbox "输入要ping6的次数(选填)" 0 0 3>&1 1>&2 2>&3)
                local speed=$(whiptail --title "ntool-tui:ping6-speed" --inputbox "输入ping6的速度(选填)（以秒为单位，省略符号，无root最快0.2）" 0 0 3>&1 1>&2 2>&3)
                local size=$(whiptail --title "ntool-tui:ping6-packet-szie" --inputbox "输入ping6包大小(选填)(以字节为单位，最大65507)" 0 0 3>&1 1>&2 2>&3)
                if [ -z $ip ] || [ -z $time ] || [ -z $speed ] || [ -z $size ];then
                    bad_empty_input
                    tool_page
                fi
                echo -e "${BLUE}start ping${RESET}"
                ping6 -i ${speed} -c${time} -s ${size} ${ip}
                echo -e "${GREEN}stop ping${RESET}"
			else
				echo "ping6未安装,正在安装..."
				apt install termux-tools -y
				tool_page
			fi
			;;
		3)
			read -p "输入你要搜索的文件:" filename
			read -p "输入你要搜索的目录:" filepath
            if [ -z $filename ] || [ -z $filepath ];then
                bad_empty_input
            fi
			echo "searching..."
			find -name ${filename} ${filepath}
			;;
		4)
			echo "只支持openjdk17"
			read -p "按回车以继续"	#我好水啊（）
			apt install openjdk-17 -y
			echo "安装完成"
			;;
		5)
			ssh_check_install
			;;
		6)
			echo "你为什么要选择一个'?'选项啊喂！"
			sleep 2
			echo "真是个笨蛋！！"
			sleep 2
			tool_page
			;;
		*)
			echo "${RED}未知选择${RESET}"
			sleep 2
			tool_page
			;;
	esac
}

function check_update(){			#这里是检查/升级的function
    cd ${MAINPATH}
    wget ${RAWURL}/version -O latest_version > /dev/null 2>&1
    if [ "`cat latest_version`" != "`cat local_version`" ];then 
        if (whiptail --title "ntool-tui:update" --yesno "你的版本不是最新版。是否更新？
        最新版:`cat latest_version`  
        本地版本:`cat local_version`" 0 0);then 
            bash -c "$(curl https://raw.githubusercontent.com/nnyyaa/ntool/main/install.sh)"
        else
            main_page
        fi
    else
        whiptail --title "ntool-tui:check update" --msgbox "您的版本为最新版，无需更新" 0 0
        main_page
    fi 
}

function web_page(){				#这里是其他功能-网络类页面function
	clear
	#echo "这里是最水的页面（doge）"
    webc=$(whiptail --title "ntool-tui:web page" --menu "选择一个以继续" 0 0 0 \
    "1" "安装Nginx" \
    "2" "安装Apache2" \
    "3" "安装php环境" \
    "4" "安装MySQL(mariadb)" \
    "0" "返回上一页" 3>&1 1>&2 2>&3)
    exitstatus=$?
	if [ $exitstatus = 1 ];then
        other_tool_page
    fi
	case $webc in
		0)
			other_tool_page
			;;
		1)
			apt install nginx -y
			echo "done"
			;;
		2)
			apt install apache2 -y
			echo "done"
			;;
		3)
			apt install php -y
			echo "done"
			;;
		4)
			apt install mariadb -y
			echo "done"
			;;
	esac
}

function main_page(){
    clear
    cd ${MAINPATH}
    mainchoice=$(whiptail --title "ntool-tui:main page" --menu "你的安卓版本为:`getprop ro.build.version.release`选择一个以继续" 0 0 0  \
    "1" "已烂尾的容器功能" \
    "2" "其它功能" \
    "3" "备份功能" \
    "4" "“这里什么都没有”" \
    "5" "一言" \
    "6" "原系统桌面" \
    "00" "更新" \
    "0" "退出" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 1 ];then
        echo -e "${BLUE}bye${RESET}"
        exit 0
    fi
    case $mainchoice in 
        00)
	        check_update
        	;;
        0)
            echo -e "${BLUE}bye${RESET}"
            exit 0
            ;;
        1)
            container_page
            ;;
        2)
            other_tool_page
            ;;
        3)
            backup_page 
            ;;
        4)
            echo "这里什么都没有"
            echo "真的"         #你看我没骗你吧,真的什么都没有
            sleep 2 
            main_page
            ;;
        5)
            whiptail --title "ntool-一言" --msgbox "`curl https://v1.hitokoto.cn/?encode=text 2>/dev/null`" 15 60
            main_page
            ;;
        6)
            desktop_page
            ;;
    esac
}
main_page
exit 0
