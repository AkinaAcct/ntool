#!/bin/bash
#已知termux里shebang可直接如上写
#####################
#  屎  山  代  码   #
#####################
#https://github.com/nya-main/ntool
#这也(一)许(定)后会成为一个烂尾工程吧
#chroot不会写(也许)(大概)(心虚)
#嗯只要没有人催我就不写a_@
#以下颜色代码为预设
RED="\E[1;31m"
GREEN="\E[1;32m"
YELLOW="\E[1;33m"
BLUE="\E[1;34m"
PINK="\E[1;35m"
CYAN="\e[36m"
RESET="\E[0m"
RNTOOL="${RED}n${YELLOW}t${BLUE}o${PINK}o${CYAN}l${RESET}"
#############预准备
ARCH="$(uname -m)"
TIME=$(date '+%Y-%m-%d %H:%M:%S')
if [ "$ARCH" == "aarch64" ];then
    ARCH="arm64"
fi
OS="$(uname -o)"     #系统
STORAGEPATH="/storage/emulated/0/Download/backup"       #备份及rootfs下载目录
MAINPATH="${HOME}/.ntool"      #主目录
RAWURL="https://raw.githubusercontent.com/nya-main/ntool/main"       #GitHub raw地址(我是一只懒懒的猫猫)
GHPAGE="https://github.com/nya-main/ntool"

if [ "${ARCH}" != "arm64" ];then
    dialog --title "ntool-tui:WARNING" --msgbox "你的架构是${ARCH}而不是arm64/aarch64\n通常来说这会造成问题,但是我已竭力适配不同的架构了\n你可以测试一下" 15 70
elif [ "${OS}" != "Android" ];then
    dialog --title "ntool-tui:WARNING" --msgbox "我还没适配除了Android以外的系统呢..." 15 70
    exit 1
fi
termux-wake-lock
###以下部分目的为获取包管理器
alias PKGI="apt install -y"
alias PKGUNI="apt purge -y"
alias PKGUPD="apt update"
alias PKGUPG="apt upgrade -y"
##########
mkdir -p ${MAINPATH}
#常用功能function
function wait_for_dev_tui(){
    dialog --title "ntool-tui:developing tui" --msgbox "正在开发" 15 70
    return 1
}
function bad_empty_input(){
    dialog --title "ntool-tui:WARNING" --msgbox "严重错误:不允许的空选项" 15 70
    return 1
}
function download_check(){
    EXITSTATUS=$?
    if [ ${EXITSTATUS} != 0 ];then
        echo -e "${RED}"
        read -p "下载出错!按回车返回"
        echo -e "${RESET}"
        return 1
    else
        return 0
    fi
}
#########################正式tui function
function patch_framework_choose(){
    if (dialog --title "ntool-tui:WARNING" --yesno "你在使用一个测试功能\n 你确定要继续吗" 15 70);then
        EXITSTATUS=$?
        if [ $EXITSTATUS != 0 ];then
            termux_main_tui
        fi
        FRAMEWORKCHOICE=$(dialog --output-fd 1 --title "ntool-tui:选择patch框架" --yes-label "XPatch" --no-label "LSPatch" --yesno "基于Java，选择任何一个选项都将安装OpenJdk17\n本页面用于免root使用lsp或xp注入应用\nLSPatch的应用仅支持安卓9及以上但较为稳定\nXPatch则是几乎全版本支持但稳定性不好,支持的模块也大大少于LSPatch\n两种patch方式都很像无极" 15 70)
        EXITSTATUS=$?
        case ${EXITSTATUS} in
            0)
                PATCHFRAMEWORK=xpatch
                ;;
            1)
                PATCHFRAMEWORK=lspatch
                ;;
        esac
        if command -v java jq > /dev/null 2>&1;then
            patch_apk
        else
            PKGI openjdk-17 jq
            patch_apk
        fi
    else
        termux_main_tui
    fi
}

function patch_apk(){
    APKPATH=$(dialog --output-fd 1 --title "ntool-tui:fast ${PATCHFRAMEWORK}" --inputbox "输入apk完整路径\n 不是apk文件的上一级目录!!!" 15 70)
    EXITSTATUS=$?
    if [ $EXITSTATUS != 0 ];then
        patch_framework_choose
    elif [ -z $APKPATH ];then
        bad_empty_input
        patch_apk
    fi
    mkdir -p ${MAINPATH}/patch
    case ${PATCHFRAMEWORK} in
        xpatch)
            echo -e "${BLUE}获取最新版本号中${RESET}"
            TAG=$(wget -qO- -t1 -T2 "https://api.github.com/repos/WindySha/Xpatch/releases/latest" | jq -r '.tag_name')
            echo -e "${GREEN}${PATCHFRAME}最新版为${TAG}${RESET}"
            wget https://github.com/WindySha/Xpatch/releases/download/${TAG}/xpatch-${tag}.jar -O ${MAINPATH}/patch/xpatch.jar
            ;;
        lspatch)
            TAG=$(wget -qO- -t1 -T2 "https://api.github.com/repos/LSPosed/LSPatch/releases/latest" | jq -r '.tag_name')
            echo -e "${GREEN}${PATCHFRAME}最新版为${TAG}${RESET}"
            wget https://github.com/LSPosed/LSPatch/releases/download/${TAG}/lspatch.jar -O ${MAINPATH}/patch/lspatch.jar
            ;;
    esac
    if [ ! -f ${APKPATH} ];then
        dialog --title "ntool-tui:failed" --msgbox "无效的apk文件路径\n 检查是否输入错误或有无给予内置存储权限" 15 70
        patch_apk
    fi
    MODULEPATH=$(dialog --output-fd 1 --title "ntool-tui:选择模块" --inputbox "输入模块apk的完整路径\n 不是apk文件的上一级目录!!!" 15 70)
    echo -e "${BLUE}可能${RED}较慢${RESET},请${GREEN}耐心等待${RESET}"
    if [ "$PATCHFRAME" == "xpatch" ];then
        java -jar ${MAINPATH}/patchedapks/xpatch.jar ${APKPATH} -xm ${MODULEPATH} -o /sdcard/xpatchedapk.apk
        rm ${MAINPATH}/patchedapks/xpatch.jar
    else
        java -jar ${MAINPATH}/patchedapks/lspatch.jar ${APKPATH} -m ${MODULEPATH} -o /sdcard
        rm ${MAINPATH}/patchedapks/lspatch.jar
    fi
    echo -e "${GREEN}完成!修改后的apk${BLUE}在这里↑↑↑↑↑上面${RESET}"
    read -p "按回车继续"
    exit 0
}

function backup_tui(){      #备份页面function
    backup_tui_choice=$(dialog --output-fd 1 --title "ntool-tui:backup tui" --menu "选择一个以继续" 15 70 8 \
    "0" "返回脚本主页" \
    "1" "备份termux" \
    "2" "恢复备份" \
    "3" "删除备份" )
    EXITSTATUS=$?
    if [ $EXITSTATUS != 0 ];then
        termux_main_tui
    fi
    case $backup_tui_choice in
        0)
            termux_main_tui
            ;;
        1)
            BACKUP_NAME=$(dialog --output-fd 1 --title "ntool-tui:backup name" --inputbox "输入备份名(仅备份com.termux/files以提高速度) " 15 70)
            EXITSTATUS=$?
            if [ $EXITSTATUS != 0 ];then
                backup_tui
            elif  [ -z $BACKUP_NAME ];then
                bad_empty_input
                backup_tui
            fi
            cd ~
            if command -v tar > /dev/null;then
                if [ -d storage ];then
                    dialog --title "ntool-tui:tips" --msgbox "备份可能会很慢,请耐心等待" 15 70
                    cd /data/data/com.termux/
                    tar -cvpzf ${STORAGEPATH}/${BACKUP_NAME}.tgz files
                    echo -e "${GREEN}计算sha1...${RESET}"
                    sha1sum ${STORAGEPATH}/${BACKUP_NAME}.tgz > ${STORAGEPATH}/${BACKUP_NAME}.tgz.sha
                    echo -e "${GREEN}完成备份${RESET}"
                    read -p  "按任意键退出"
                    backup_tui
                else
                    echo -e "${RED}termux-setup-storage未执行${RESET}"
                    echo -e "${BLUE}执行中...${RESET}"
                    sleep 2
                    termux-setup-storage
                    echo "${GREEN}完成${RESET}"
                    backup_tui
                fi
            else
                echo "tar未安装"
                echo "start installing..."
                PKGI tar
                backup_tui
            fi
            ;;
        2)
            RESTORE_PATH=$(dialog --output-fd 1 --title "ntool-tui:输入完整目录！" --inputbox ${STORAGEPATH} 15 70)
            EXITSTATUS=$?
            if [ $EXITSTATUS != 0 ];then
                backup_tui
                exit 0
            elif [ -z $RESTORE_PATH ];then
                bad_empty_input
                backup_tui
            fi 
            cd ~
            echo "比对sha中..."
            sha1sum -c ${RESTORE_PATH}.sha >> /dev/null 2>&1
            EXITSTATUS=$?
            if [ $EXITSTATUS = 0 ];then 
                echo -e "${GREEN}sha正常${RESET}"
                echo "${GREEN}3${BLUE}秒后开始恢复${RESET}"
                sleep 3
                tar -xvpzf ${RESTORE_PATH} -C /data/data/com.termux/
                echo -e  "${GREEN}完成，重启生效，按回车以退出${RESET}"
            else
                dialog --title "ntool-tui:WARNING" --msgbox "警告:不匹配的sha值!不进行恢复" 15 70
                backup_tui 
            fi
            ;;
        3)
            DEL_BACKUP_PATH=$(dialog --output-fd 1 --title "ntool-tui:输入完整目录" --inputbox "输入完整tgz文件路径" 15 70)
            EXITSTATUS=$?
            if [ $EXITSTATUS != 0 ];then
                backup_tui
            elif [ -z $DEL_BACKUP_PATH ];then
                bad_empty_input
                backup_tui
            fi 
            rm -v ${DEL_BACKUP_PATH}
            rm -v ${DEL_BACKUP_PATH}.sha
            read -p "按任意键继续"
            backup_tui
            ;;
    esac
}

function container_testing_tui(){
    dialog --title "ntool-tui:按ESC返回上一页" --yes-label "proot" --no-label "chroot" --yesno "选择一个\nchroot需要root,运行速度较快\nproot无需root,但运行速度较慢" 15 70
    EXITSTATUS=$?
    case ${EXITSTATUS} in
        0)
            CONTAINERPOR="PROOT" #CONTAINER PROOT OR CHROOT
            ;;
        1)
            CONTAINERPOR="CHROOT" #CONTAINER PROOT OR CHROOT 
            ;;
        255)
            container_tui
            ;;
    esac
    LINUXNAME=$(dialog --output-fd 1 --title "ntool-tui:testing function" --inputbox "你在使用一个测试功能\n输入Linux发行版名称" 15 70)
    LINUXVER=$(dialog --output-fd 1 --title "ntool-tui:testing function" --inputbox "你在使用一个测试功能\n输入发行版版本" 15 70)
    LINUXPATH=$(dialog --output-fd 1 --title "ntool-tui:testing function" --inputbox "你在使用一个测试功能\n输入安装路径" 15 70)
    if [ -z ${LINUXNAME} -o -z ${LINUXVER} -o -z ${}r];then
        bad_empty_input
        container_testing_tui
    else
        echo -e "${GREEN}正在从BFSU镜像站获取rootfs地址...${RESET}"
        ROOTFSTIME=$(curl https://mirrors.bfsu.edu.cn/lxc-images/images/${CONTAINER_OS}/${VERNAME}/${ARCH}/default/ 2> /dev/null | gawk '{print $3}' | tail -n 3 | head -n 1 | gawk -F '"' '{print $2}' | gawk -F '/' '{print $1}')
        echo -e "${GREEN}检测获取的地址是否正确...${RESET}"
        if [ -z ${ROOTFSTIME} ];then
            echo -e "${RED}"
            read -p  "获取到了错误的rootfs地址!按回车重新输入信息!"
            echo -e "${RESET}"
            container_testing_tui
        else
            echo -e "${GREEN}开始下载...${RESET}"
            aria2c https://mirrors.bfsu.edu.cn/lxc-images/images/${LINUXNAME}/${LINUXVER}/${ARCH}/default/${ROOTFSTIME}/rootfs.tar.xz -o ${MAINPATH}/rootfs/${LINUXNAME}-${LINUXVER}.tar.xz
            download_check
            EXITSTATUS=$?
            if [ ${EXITSTATUS} = 1 ];then
                rm ${MAINPATH}/rootfs/${LINUXNAME}-${LINUXVER}.tar.xz
                container_testing_tui
            fi
            echo -e "${GREEN}下载完成!解压中...${RESET}"
            wait_for_dev_tui
            tar -xvf ${MAINPATH}/rootfs/${LINUXNAME}-${LINUXVER}.tar.xz -C ${LINUXPATH}
            case ${CONTAINERPOR} in
                PROOT)
                    write_groupadd_sh
                    write_setupdeb_sh
                    container_script_write
                    ;;
                CHROOT)
                    wait_for_dev_tui
                    exit 1
                    ;;
            esac
            echo -e "${GREEN}完成${RESET}"
        fi
    fi
}

function container_tui(){      #容器OS选择
    CONTAINER_CHOICE=$(dialog --output-fd 1 --title "ntool-tui:container installer" --menu "选择一个以继续" 15 70 8 \
    "1" "Ubuntu 我的存在是因为大家的存在" \
    "2" "Debian 为爱发电,爱的结晶" \
    "3" "使用测试中的新容器安装脚本" \
    "0" "返回上一页")       #我是鸽子咕咕咕，其他功能等我慢慢写
    EXITSTATUS=$?
    if [ $EXITSTATUS != 0 ];then
        termux_main_tui
    fi
    case $CONTAINER_CHOICE in
        0)
            termux_main_tui
            ;;
        1)
            CONTAINER_OS=ubuntu
            ubuntu_version_tui
            ;;
        2)
            CONTAINER_OS=debian
            debian_version_tui
            ;;
        3)
            container_testing_tui
            ;;
    esac
}

function debian_version_tui(){     #Debian版本选择
    DEBIAN_VER_CHOICE=$(dialog --output-fd 1 --title "ntool-tui:Debian Version" --menu "选择一个以继续 \n同版本不可二次安装，不同版本可以哦" 15 70 8 \
    "1" "Debian10 Buster" \
    "2" "Debian11 Bullseye" \
    "0" "返回上一页")
    EXITSTATUS=$?
    if [ $EXITSTATUS != 0 ];then
        container_tui
    fi
    case $DEBIAN_VER_CHOICE in
        0)
            container_tui
            ;;
        1)
            VERCODE="10"
            VERNAME="buster"
            ;;
        2)
            VERCODE="11"
            VERNAME="bullseye"
            ;;
    esac
    container_control_tui
}

function ubuntu_version_tui(){     #Ubuntu版本选择
    cd ${MAINPATH}
    UBUNTU_VER_CHOICE=$(dialog --output-fd 1 --title "ntool-tui:Ubuntu Version" --menu "选择一个以继续\n同版本不可二次安装，不同版本可以哦" 15 70 8 \
    "1" "Ubuntu22.04 Jammy Jellyfish" \
    "2" "Ubuntu20.04 Focal Fossa" \
    "0" "返回上一页")
    EXITSTATUS=$?
    if [ $EXITSTATUS != 0 ];then
        container_tui
    fi
    case $UBUNTU_VER_CHOICE in 
        0)
            container_tui
            ;;
        1)
            VERCODE="22.04"
            VERNAME="jammy"
            ;;
        2)
            VERCODE="20.04"
            VERNAME="focal"
            ;;
    esac
    container_control_tui
}

function container_control_tui(){
    CCPAGECHOICE=$(dialog --output-fd 1 --title "ntool-tui:container control" --menu "${CONTAINER_OS}${VERCODE} ${VERNAME}管理页面 \n选择一个以继续" 15 70 8 \
    "1" "安装" \
    "2" "卸载" \
    "0" "返回上一页")
    EXITSTATUS=$?
    if [ $EXITSTATUS != 0 ];then
        ${CONTAINER_OS}_version_tui
    fi
    case $CCPAGECHOICE in
        0)
            ${CONTAINER_OS}_version_tui
            ;;
        1)
            if [ -d ${CONTAINER_OS}-${VERNAME} ];then
                dialog --title "ntool-tui:WARNING" --msgbox "不允许的二次安装" 15 70
                container_control_tui
            fi
            container_install
            exit 0
            ;;
        2)
            if [ ! -d ${CONTAINER_OS}-${VERNAME} ];then
                dialog --title "ntool-tui:WARNING" --msgbox "你还没有安装这个容器" 15 70
                container_control_tui
            fi
            dialog --title "ntool-tui:WARNING" --defaultno --yesno "警告！\n这会删除你在容器里的全部数据\n如果你不知道你在干什么，请取消" 15 70
            EXITSTATUS=$?
            if [ $EXITSTATUS != 0 ];then
                container_control_tui
                exit 0
            fi
            container_delete
            exit 0
            ;;
    esac
}

function container_delete(){
    rm -rvf ${MAINPATH}/${CONTAINER_OS}-${VERNAME}
    rm -v $PREFIX/bin/start${VERNAME}
    dialog --title "ntool-tui:success" --msgbox "删除完成" 15 70
    container_tui
}

function container_script_write(){
echo -e "${GREEN}写入启动脚本中${RESET}"
cat > $PREFIX/bin/start${VERNAME} <<- EOF
#!/data/data/com.termux/files/usr/bin/bash
#ntool ${CONTAINER_OS}${VERCODE}:${VERNAME}启动脚本
#嗯...复制也是可以的啦...我不在意...
#毕竟这东西没什么技术含量的啦...
cd ~/.ntool
unset LD_PRELOAD
COMMAND="proot"
COMMAND+=" --link2symlink"
COMMAND+=" -0"
COMMAND+=" -r ${CONTAINER_OS}-${VERNAME}"
COMMAND+=" -b /dev"
COMMAND+=" -b /sys"
COMMAND+=" -b /proc"
#不建议直接挂载sdcard
#有隐私问题
#COMMAND+=" -b /sdcard"
#默认不挂载本机目录
#下面一行为仅挂载termux里的HOME(默认注释)
#COMMAND+=" -b /data/data/com.termux/files/home:/root"
COMMAND+=" -w /root"
COMMAND+=" /usr/bin/env -i"
COMMAND+=" HOME=/root"
COMMAND+=" PATH=/usr//sbin:/usr//bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/games:/usr//games"
COMMAND+=" TERM=xterm-256color"
COMMAND+=" LANG=C.UTF-8"
COMMAND+=" /bin/bash -l"
EOF
echo 'exec $COMMAND' >> ${PREFIX}/bin/start${VERNAME}
chmod +x ${PREFIX}/bin/start${LINUXVER}
}

function write_groupadd_sh(){
echo -e "${GREEN}添加用户组中...${RESET}"
cat > ${MAINPATH}/${CONTAINER_OS}-${VERNAME}/root/groupadd.sh <<- EOF
groupadd -g 3003 inet
groupadd -g 9997 everybody
groupadd -g 20123 u0_a123_cache
groupadd -g 50123 all_a123
groupadd -g 99909997 u999_everybody
EOF
}

function write_setupdeb_sh(){
echo -e "${GREEN}写入初始化脚本中...${RESET}"
cat > ${MAINPATH}/${CONTAINER_OS}-${VERNAME}/root/setup.sh <<- EOF
echo -e "${GREEN}正在配置，请稍等${RESET}"
bash groupadd.sh
echo "nameserver 8.8.8.8" >> /etc/resolv.conf
apt update
apt upgrade -y
apt install apt-transport-https -y
cd /usr/bin
mv `ls | grep perl` perl
apt install ca-certificates -y
echo -e "${GREEN}将http换为https${RESET}"
sed -i 's/http/https/g' /etc/apt/sources.list
apt update
apt install dialog whiptail wget curl aria2 -y
sed -i '/setup.sh/d' /etc/profile
echo -e "${GREEN}完成！开始使用你的${CONTAINER_OS}${VERCODE} ${VERNAME}${RESET}"
cd ~
rm setup.sh groupadd.sh
EOF
}

function container_install(){
    PKGUPD && PKGUPG
    command -v aria2c > /dev/null
    EXITSTATUS=$?
    if [ ${EXITSTATUS} = 1 ];then
        PKGI aria2c
    fi
    mkdir -p ${MAINPATH}/${CONTAINER_OS}-${VERNAME}
    echo -e "${GREEN}稍等，正在检查选择${CONTAINER_OS}的最新rootfs...${RESET}"
    ROOTFSTIME=$(curl https://mirrors.bfsu.edu.cn/lxc-images/images/${CONTAINER_OS}/${VERNAME}/${ARCH}/default/ 2> /dev/null | gawk '{print $3}' | tail -n 3 | head -n 1 | gawk -F '"' '{print $2}' | gawk -F '/' '{print $1}')
    echo -e "最新版(时间):${GREEN}${ROOTFSTIME}${RESET}"
    echo -e "请${GREEN}耐心${RESET}等待,而${RED}不要ctrl-c或其他方式终止${RESET}"
    if [ -f ${CONTAINER_OS}-${VERNAME}*.tar.xz ];then
        echo -e "${BLUE}发现存在的rootfs.为防止错误,删除中...${RESET}"
        rm ${CONTAINER_OS}-${VERNAME}*.tar.xz
    fi
    wget https://mirrors.bfsu.edu.cn/lxc-images/images/${CONTAINER_OS}/${VERNAME}/${ARCH}/default/${ROOTFSTIME}/rootfs.tar.xz -o ${CONTAINER_OS}-${VERNAME}.tar.xz
    tar -xvf ${CONTAINER_OS}-${VERNAME}.tar.xz -C ${MAINPATH}/${CONTAINER_OS}-${VERNAME}
    container_script_write
    echo -e "${GREEN}写入dns中${RESET}"
    mkdir -p ${CONTAINER_OS}-${VERNAME}/run/systemd/resolve/
    #淦哦deb系的rootfs解压后会出现err导致resolv.conf硬链接失效,只能手动创建文件夹然后重新写入
    echo "nameserver 8.8.8.8" > ${CONTAINER_OS}-${VERNAME}/etc/resolv.conf
    echo "nameserver 8.8.8.8" > ${CONTAINER_OS}-${VERNAME}/run/systemd/resolve/stub-resolv.conf
    echo -e "${GREEN}删除rootfs中${RESET}"
    rm ${CONTAINER_OS}-${VERNAME}.tar.xz > /dev/null 2>&1
    echo -e "${GREEN}写入配置脚本中${RESET}"
    echo "bash setup.sh" >> ${MAINPATH}/${CONTAINER_OS}-${VERNAME}/etc/profile
    write_groupadd_sh
    if [ "$CONTAINER_OS" == "ubuntu" ] || [ "CONTAINER_OS" == "debian" ];then
        write_setupdeb_sh
    fi
    sleep 0.3
    echo -e "${BLUE}${CONTAINER_OS}${VERCODE} ${VERNAME}${GREEN}安装成功${RESET}!输入${BLUE}start${VERNAME}${RESET}启动并配置容器"
}

function change_source_tui(){       #换源
    SOURCE_CHOICE=$(dialog --output-fd 1 --title "ntool-tui:change source" --menu "1.警告!这会重置你的源列表 \
    2.事实上,你可以使用termux-change-repo来换源,所以这里实际意义不大" 15 70 8 \
    "1" "使用termux-change-repo(推荐)" \
    "0" "返回上一页")
    EXITSTATUS=$?
    if [ $EXITSTATUS != 0 ];then
        other_tool_tui 
    elif [ -z $SOURCE_CHOICE ];then
        other_tool_tui
    fi
    case $SOURCE_CHOICE in 
        0)
            other_tool_tui
            ;;
        1)
            termux-change-repo
            exit 0
            ;;
    esac
}

function other_tool_tui(){			#这里是其他功能页的function
    OTPC=$(dialog --output-fd 1 --title "ntool-tui:other tool tui" --menu "选择一个以继续" 15 70 8 \
    "1" "网络页面" \
    "2" "工具页面" \
    "3" "换源" \
    "0" "返回上一页")
    EXITSTATUS=$?
    if [ $EXITSTATUS != 0 ];then
        termux_main_tui
    fi
    case $OTPC in 
        0)
		    termux_main_tui
            ;;
        1)
            web_tui
            ;;
	    2)
	    	tool_tui
		    ;;
        3)
            change_source_tui
    esac
}

function ssh_check_install(){
	if command -v ssh;then
		dialog --title "ntool-tui:ssh check" --msgbox "ssh功能较少,BUG多多,慎用" 15 70
		ssh_tui
	else
		echo "${RED}未安装ssh客户/服务端${RESET}"
		echo "${GREEN}安装中...${RESET}"
		PKGI openssh
        echo -e "${GREEN}"
        echo "完成"
        read -p "按任意键以继续"
        echo -e "${RESET}"
		ssh_check_install
	fi
}

function ssh_tui(){
    SSH_CHOICE=$(dialog --output-fd 1 --title "ntool-tui:ssh tui" --menu "选择一个以继续" 15 70 8 \
    "1" "打开sshd服务(让他人连接)" \
    "2" "通过密码连接远程服务器" \
    "3" "生成密钥" \
    "0" "返回上一页")
    EXITSTATUS=$?
    if [ $EXITSTATUS != 0 ];then
        tool_tui
    fi
	case $SSH_CHOICE in
		0)
			tool_tui
			;;
		1)
			sshd
            echo -e "${GREEN}"
			read -p "启动完成 按任意键继续"
            echo -e "${RESET}"
			exit 0
			;;
		2)
			if command -v sshpass;then
				read -p "输入远程服务器ip/域名:" ssh_ip
				read -p "输入要登陆的用户名:" ssh_user
				read -p "输入ssh端口:" ssh_port
				read -p "输入密码:" ssh_passwd
				echo "please wait..."
				sshpass -p ${ssh_passwd} ssh ${ssh_user}@${ssh_ip} -p ${ssh_port}
			else
				echo "sshpass未安装"
				echo "installing..."
                PKGI sshpass
				ssh_tui
			fi
			;;
		3)
            while true;
            do
            EmailInput=$(dialog --output-fd 1 --title "ntool-tui:keygen" --inputbox "使用RSA\n输入你的邮箱:" 15 70)
            EXITSTATUS=$?
            if [ -a EmailInput];then
                bad_empty_input
            elif [ $EXITSTATUS != 0 ];then
                ssh_tui
                break
            else
                break
            fi
            done
            echo -e "${GREEN}接下来请一路回车${RESET}"
            ssh-keygen -t rsa -C "$EmailInput"
            echo -e "${GREEN}完成!\n公钥在:${HOME}/.ssh/id_rsa.pub\n私钥在:${HOME}/.ssh/id_rsa"
            read -p "按任意键继续"
			;;
	esac
}
function qrcode_tui(){
    QRCHOICE=$(dialog --output-fd 1 --title "ntool-tui:按<ESC>返回上一页" --yes-label "生成" --no-label "解码" --yesno "使用 \nqrencode 和 zbar实现 \n选择一个以继续" 15 70)
    EXITSTATUS=$?
    if [ ${EXITSTATUS} = 255 ];then
        tool_tui
    fi
    case ${EXITSTATUS} in
        0)
            QRSPAWN=$(dialog --output-fd 1 --title "ntool-tui:qrcode spawn" --inputbox "输入你想要加密的文本" 15 70)
            EXITSTATUS=$?
            if [ ${EXITSTATUS} != 0 ];then
                qrcode_tui
            fi
            dialog --output-fd 1 --title "ntool-tui:configure" --yesno "是否要保存该二维码到内置存储目录?" 15 70
            EXITSTATUS=$?
            if [ ${EXITSTATUS} != 0 ];then
                qrencode -o - -t ANSI "${QRSPAWN}"
                echo -e "${GREEN}"
                read -p "按回车继续"
                echo -e "${RESET}"
                qrcode_tui
            else
                QRSTOREPATH=$(dialog --output-fd 1 --title "按空格选择" --dselect "/sdcard" 15 70)
                EXITSTATUS=$?
                if [ ${EXITSTATUS} != 0 ];then
                    qrcode_tui
                elif [ -z ${QRSTOREPATH} ];then
                    bad_empty_input
                    qrcode_tui
                fi
                qrencode -t png -o ${QRSTOREPATH}/qrcode-${QRSPAWN}.png "${QRSPAWN}"
                catimg ${QRSTOREPATH}/qrcode-${QRSPAWN}.png
                echo -e "${GREEN}完成!保存在${BLUE}${QRSTOREPATH}/qrcode-${QRSPAWN}.png${RESET}"
                echo -e "${GREEN}"
                read -p "按回车继续"
                echo -e "${RESET}"
                qrcode_tui
            fi
            ;;
        1)
            QRUNCODEPATH=$(dialog --output-fd 1 --title "ntool-tui:qrcode uncode" --fselect "选择好文件后按空格选择(删掉我),或者直接输入完整路径" 15 70)
            EXITSTATUS=$?
            if [ -z ${QRUNCODEPATH} ];then
                bad_empty_input
                qrcode_tui
            elif [ ${EXITSTATUS} != 0 ];then
                qrcode_tui
            fi
            echo -e "${BLUE}结果${RESET}:$(zbarimg ${QRUNCODEPATH} | sed -n '1p')"
            echo -e "${GREEN}"
            read -p "按回车继续"
            echo -e "${RESET}"
            qrcode_tui
            ;;
    esac
}

function rm_to_trash(){
    dialog --title "ntool-tui:按ESC退出" --yes-label "trash-cli" --no-label "rm" --yesno "trash-cli是一个适用于linux命令行下的回收站应用\n相对于rm的直接删除它更为安全,因为可以恢复\n删除后的文件将被保存在回收站\n真的是我的血的教训" 15 70
    EXITSTATUS=$?
    if [ ${EXITSTATUS} = 255 ];then
        tool_tui
    fi
    case ${EXITSTATUS} in
        0)
            if [ $(cat ${PREFIX}/etc/profile | grep trash) ];then
                dialog --title "ntool-tui:tips" --msgbox "你已经安装过啦!下面是一些使用提示: \nrm-文件转移到~/.trash \nrl-显示回收站里的文件 \nrm-restore-选择要从回收站里恢复的文件 \ntrash-empty-清除回收站" 15 70
                exit 0
            else
                if [ ! $(command -v trash) ];then
                    pip install trash-cli
                fi
                cat >> ${PREFIX}/etc/profile << EOF
alias rm='trash-put --trash-dir ~/.trash'
alias rl='trash-list --trash-dir ~/.trash'
alias rm-restore='trash-restore --trash-dir ~/.trash'
alias trash-empty='trash-empty --trash-dir ~/.trash'
EOF
                dialog --title "ntool-tui:tips" --msgbox "完成!重启termux以应用.下面是一些使用提示: \nrm-文件转移到~/.trash \nrl-显示回收站里的文件 \nrm-restore-选择要从回收站里恢复的文件 \ntrash-empty-清除回收站" 15 70
            fi
            ;;
        1)
            sed -i '/trash/d' ${PREFIX}/etc/profile
            dialog --title "ntool-tui:tips" --msgbox "完成!" 15 70
            tool_tui
            ;;
    esac
}

function tool_tui(){			#这里是其它工具-工具类页面的function
    TPC=$(dialog --output-fd 1 --title "ntool-tui:tool tui" --menu "选择一个以继续" 15 70 8 \
    "1" "ping" \
    "2" "ping6" \
    "3" "文件查找" \
    "4" "安装openjdk17" \
    "5" "ssh功能" \
    "6" "二维码功能" \
    "7" "rm防误删" \
    "00" "打开该项目地址(?)" \
    "0" "返回上一页")
    EXITSTATUS=$?
    if [ $EXITSTATUS != 0 ];then
        other_tool_tui
    fi
	case $TPC in
		0)
			other_tool_tui
			;;
		00)
            figlet "ntool" | lolcat -a -d 2
            figlet "Powered by" | lolcat -a -d 2
            figlet "nya" | lolcat -a -d 2
			am start -a android.intent.action.VIEW -d ${GHPAGE} > /dev/null 2>&1
			;;

		1)
			if command -v ping > /dev/null;then
                 ip=$(dialog --output-fd 1 --title "ntool-tui:ping-ip" --inputbox "输入要进行ping的IP/域名(必填)"15 70)
                 time=$(dialog --output-fd 1 --title "ntool-tui:ping-time" --inputbox "输入要ping的次数(选填)" 15 70)
                 speed=$(dialog --output-fd 1 --title "ntool-tui:ping-speed" --inputbox "输入ping的速度(选填)（以秒为单位，省略符号，无root最快0.2）" 15 70)
                 size=$(dialog --output-fd 1 --title "ntool-tui:ping-packet-szie" --inputbox "输入ping包大小(选填)(以字节为单位，最大65507)" 15 70)
                if [ -z $ip ] || [ -z $time ] || [ -z $speed ] || [ -z $size ];then
                    bad_empty_input
                    tool_tui
                else 
                    echo -e "${BLUE}start ping${RESET}"
    				ping -i ${speed} -c${times} -s ${size} ${ip}
	    			echo -e "${GREEN}stop ping${RESET}"
                fi
			else
				echo "未安装ping，正在安装..."
				PKGI termux-tools
				tool_tui
			fi
			;;
		2)
			if command -v ping6 > /dev/null;then
                 ip=$(dialog --output-fd 1 --title "ntool-tui:ping6-ip" --inputbox "输入要进行ping6的IP/域名(必填)"15 70)
                 time=$(dialog --output-fd 1 --title "ntool-tui:ping6-time" --inputbox "输入要ping6的次数(选填)" 15 70)
                 speed=$(dialog --output-fd 1 --title "ntool-tui:ping6-speed" --inputbox "输入ping6的速度(选填)（以秒为单位，省略符号，无root最快0.2）" 15 70)
                 size=$(dialog --output-fd 1 --title "ntool-tui:ping6-packet-szie" --inputbox "输入ping6包大小(选填)(以字节为单位，最大65507)" 15 70)
                if [ -z $ip ] || [ -z $time ] || [ -z $speed ] || [ -z $size ];then
                    bad_empty_input
                    tool_tui
                else
                    echo -e "${BLUE}start ping${RESET}"
                    ping6 -i ${speed} -c${time} -s ${size} ${ip}
                    echo -e "${GREEN}stop ping${RESET}"
                fi
			else
				echo "ping6未安装,正在安装..."
				PKGI termux-tools
				tool_tui
			fi
			;;
		3)
             filename=$(dialog --output-fd 1 --title "ntool-tui:find file" --inputbox "输入你要搜索的文件:" 15 70)
             filepath=$(dialog --output-fd 1 --title "ntool-tui:find file" --inputbox "输入你要搜索的目录:" 15 70)
            if [ -z $filename ] || [ -z $filepath ];then
                bad_empty_input
            fi
			echo -e "${BLUE}搜索中${RESET}"
            echo -e "可能${RED}较慢${RESET},请${GREEN}耐心等待${RESET}"
            echo -e "${BLUE}搜索中${RESET}"
            result=$(find -name ${filename} ${filepath})
            echo "${result}" > ~/filesearchresult
            echo -e "${GREEN}完成${RESET}"
            echo -e "${BLUE}结果:${RESET}\n${result}"
            echo -e "${GREEN}复制一份于~/filesearchresult"
            read -p "按回车继续"
            echo -e "$RESET"
            tool_tui
			;;
		4)
			echo "只支持openjdk17"
			read -p "按任意键以继续"	#我好水啊（）
			PKGI openjdk-17
			echo "安装完成"
			;;
		5)
			ssh_check_install
			;;
		6)
            command -v qrencode 
            EXITSTATUS=$?
            if [ ${EXITSTATUS} != 0 ];then
                PKGI libqrencode zbar
                qrcode_tui
            else
                qrcode_tui
            fi
			;;
        7)
            rm_to_trash
            ;;
	esac
    exit 0
}

function web_tui(){				#这里是其他功能-网络类页面function
	#echo "这里是最水的页面（doge）"
    webc=$(dialog --output-fd 1 --title "ntool-tui:web tui" --menu "选择一个以继续" 15 70 8 \
    "1" "安装Nginx" \
    "2" "安装Apache2" \
    "3" "安装php环境" \
    "4" "安装MySQL(mariadb)" \
    "0" "返回上一页")
    EXITSTATUS=$?
	if [ $EXITSTATUS != 0 ];then
        other_tool_tui
    fi
	case $webc in
		0)
			other_tool_tui
			;;
		1)
			PKGI nginx
			echo "done"
			;;
		2)
			PKGI apache2
			echo "done"
			;;
		3)
			PKGI php
			echo "done"
			;;
		4)
			PKGI mariadb
			echo "done"
			;;
	esac
}

######main tui
function termux_main_tui(){
    MAINCHOICE=$(dialog --output-fd 1 --title "ntool-tui:main tui" --menu "你的系统为:${OS}\n选择一个以继续" 15 70 8  \
    "1" "已烂尾的容器功能" \
    "2" "其它功能" \
    "3" "备份功能" \
    "4" "计算圆周率(好水)" \
    "5" "一言" \
    "6" "LSPatch/XPatch功能" \
    "7" "ntafetch-使用ntafetch作为motd(测试)" \
    "8" "反映一个BUG" \
    "00" "更新" \
    "0" "退出")
    EXITSTATUS=$?
    if [ $EXITSTATUS != 0 ];then
        echo -e "${BLUE}b${GREEN}y${YELLOW}e${RESET}"
        exit 0
    fi
    case $MAINCHOICE in 
        00)
	        check_and_update
        	;;
        0)
            echo -e "${BLUE}b${GREEN}y${YELLOW}e${RESET}"
            exit 0
            ;;
        1)
            container_tui
            ;;
        2)
            other_tool_tui
            ;;
        3)
            backup_tui
            ;;
        4)
            if command -v bc > /dev/null;then
                 BC=$(dialog --output-fd 1 --title "ntool-tui:bc PI" --inputbox "输入计算位数    越往后面算的越慢" 15 70)
                EXITSTATUS=$?
                if [ $EXITSTATUS != 0 ];then
                    termux_main_tui
                fi
                echo -e "${GREEN}请耐心等待...${RESET}"
                echo "计算开始时间:$(date '+%Y-%m-%d %H:%M:%S:%N')" > ${HOME}/pi.txt
                echo "scale=${BC}; 4*a(1)" | bc -l -q >> ${HOME}/pi.txt
                echo "计算结束时间:$(date '+%Y-%m-%d %H:%M:%S:%N')" >> ${HOME}/pi.txt
                dialog --title "ntool-tui:success" --textbox "${HOME}/pi.txt" 20 80
                termux_main_tui
            else
                echo -e "${BLUE}正在安装bc计算器...${RESET}"
                PKGI bc
                echo -e ${GREEN}
                read -p "按回车返回"
                echo -e ${RESET}
                termux_main_tui
            fi
            ;;
        5)
            dialog --title "ntool-一言" --msgbox "$(curl https://v1.hitokoto.cn/?encode=text 2>/dev/null)" 15 70
            termux_main_tui
            ;;
        6)
            patch_framework_choose
            ;;
        7)
            check_if_not_android_warning
            function ntafetch_install(){
                wget https://raw.githubusercontent.com/nya-main/ntafetch/main/ntafetch -O ${PREFIX}/bin/ntafetch
                chmod +x ${PREFIX}/bin/ntafetch
                mv $PREFIX/etc/motd ${PREFIX}/etc/motd.bak > /dev/null 2>&1
            }
            if (dialog --title "ntool-tui:developing action" --defaultno --yesno "ntafetch由无数个echo -e组成\n写这个的主要原因是因为termux自带motd过于臃肿\n并不推荐使用，因为没有经过足够的测试" 15 70);then
                 ISINSTALLED="$(cat ${PREFIX}/etc/termux-login.sh | grep ntafetch)"
                if [ ! -z "$ISINSTALLED" ];then
                    if (dialog --title "ntool-tui:WARNING" --defaultno --yesno "你已经安装过ntafetch了\n你确定要重装吗?" 15 70);then
                        ntafetch_install
                    else
                        termux_main_tui
                    fi
                else
                    ntafetch_install
                    echo "ntafetch" >> ${PREFIX}/etc/termux-login.sh
                fi
            else
                termux_main_tui
            fi
            termux_main_tui
            ;;
        8)
            dialog --title "ntool-tui:report" --yes-label "GitHub" --no-label "Blog" --yesno "你可以到ntool项目下提出issue \n或者到博客的关于页找我 \n我也会看的" 15 70
            EXITSTATUS=$?
            if [ ${EXITSTATUS} = 255 ];then
                termux_main_tui
            elif [ ${EXITSTATUS} = 0 ];then
                am start -a android.intent.action.VIEW -d ${GHPAGE} > /dev/null 2>&1
            elif [ ${EXITSTATUS} = 1 ];then
                dialog --title "ntool-tui:give me the money!" --yes-label "好的" --no-label "可以" --yesno "博客由于经营不善,倒闭了qwq\n我需要你的帮助(⁠≧⁠▽⁠≦⁠)\n你愿意v我50嘛?" 0 0
                EXITSTATUS=$?
                if [ ${EXITSTATUS} = 255 ];then
                    echo -e "哼,连50都不愿意给我!!\n再也不见qwq"
                    exit 123
                else
                    echo -e "好耶!"
                    termux_main_tui
                fi
            fi
    esac
}
function check_and_update(){			#这里是检查/升级的function
    if [ "$(curl ${RAWURL}/version 2> /dev/null)" != "$(cat ${MAINPATH}/local_version 2> /dev/null)" ];then
        if (dialog --title "ntool-tui:install&update" --yesno "你的版本不是最新版。是否更新？\n最新版:$(curl ${RAWURL}/version 2> /dev/null)\n本地版本:$(cat ${MAINPATH}/local_version)" 15 70);then
            echo -e "${BLUE}更新中...${RESET}"
            PKGUPD && PKGUPG
            PKGI git wget curl python x11-repo dialog jq
            wget ${RAWURL}/ntsource -O ${PREFIX}/lib/ntool/ntsf
            wget ${RAWURL}/version -O ${MAINPATH}/local_version
	    mkdir -p .ntool
            echo -e "${GREEN}完成!输入ntool以启动!${RESET}"
            exit 0
        else
            termux_main_tui
        fi
    else
        dialog --title "ntool-tui:check update" --msgbox "你的版本为最新版，无需更新" 15 70
        exit 0
    fi
}
####启动function
function start(){
    if [ $# -gt 1 ];then
        echo -e "${RED}more than one parameter had been inputted${RESET}"
        exit 1
    elif [ $# -lt 1 ];then
        termux_main_tui
    fi
    case ${*} in
        -d|--debug)
            echo ${TIME} > ~/log.txt
            exec 2>> ~/log.txt
            set -x
            dialog --title "ntool-tui:WARNING" --msgbox "debug/set -x模式已启动 \n所有执行的命令都会被打印出来再执行\n 有一份命令复制保存在~/log.txt" 15 70
            termux_main_tui
            ;;
        -s|--strict)
            set -e
            dialog --title "ntool-tui:WARNING" --msgbox "严格模式/set -e已经启动 \n出现任何报错将直接终止脚本运行 \n该模式下容器安装一定会报错" 15 70
            termux_main_tui
            ;;
        -v|--version)
             NTOOLVERSION="$(cat ${MAINPATH}/local_version 2> /dev/null)"
            if [ -z ${NTOOLVERSION} ];then
                echo -e "${RNTOOL}\n version:${RED}ERR-FILE-NOT-FOUND${RESET}\n mode:${GREEN}normal mode${RESET}"
            else
                echo -e "${RNTOOL}\n version:${BLUE}${NTOOLVERSION}${RESET}\n mode:${GREEN}normal mode${RESET}"
            fi
            ;;
        -h|--help)
            echo -e "${RNTOOL} help."
            echo -e "${GREEN}-h,--help${RESET} print this help"
            echo -e "${GREEN}-v,--version${RESET} print then ntool's version that you've installed."
            echo -e "${GREEN}-g,--github${RESET} open ntool's github page."
            echo -e "${GREEN}-u,--update${RESET} update ntool from github."
            echo -e "${YELLOW}-d,--debug${RESET} enable debug mode(set -x).Logs will be redirected to ~/log.txt."
            echo -e "${RED}-s,--strict${RESET} enable ${RED}\"set -e\"${RESET} and it will cause many problems such as uncompress failed."
            ;;
        -u|--update)
            echo -e "${GREEN}请稍等,正在拉取最新版本号...${RESET}"
            check_and_update
            ;;
        -g|--github)
            am start -a android.intent.action.VIEW -d ${GHPAGE} > /dev/null 2>&1
            ;;
    esac
    echo -e "${RED}Unknown parameter:${*}${RESET}"
}
